# –£–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è AI News Bot

import os
import hmac
import hashlib
import secrets
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import logging
import asyncio
from dataclasses import dataclass
import json

# ===== 1. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ API =====
class SecureAPIClient:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π"""
    
    def __init__(self, api_keys: List[str], rate_limit_per_minute: int = 60):
        self.api_keys = api_keys
        self.current_key_index = 0
        self.rate_limit = rate_limit_per_minute
        self.request_counts = {}
        self.key_blacklist = set()
    
    def get_active_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ API –∫–ª—é—á–∞"""
        # –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –∫–ª—é—á–∞
        for i in range(len(self.api_keys)):
            key_index = (self.current_key_index + i) % len(self.api_keys)
            if key_index not in self.key_blacklist:
                current_minute = datetime.now().strftime("%Y-%m-%d-%H-%M")
                key_requests = self.request_counts.get(f"{key_index}_{current_minute}", 0)
                
                if key_requests < self.rate_limit:
                    self.current_key_index = key_index
                    return self.api_keys[key_index]
        
        raise Exception("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
    
    def record_request(self):
        """–ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
        current_minute = datetime.now().strftime("%Y-%m-%d-%H-%M")
        key = f"{self.current_key_index}_{current_minute}"
        self.request_counts[key] = self.request_counts.get(key, 0) + 1
    
    def blacklist_current_key(self, duration_minutes: int = 60):
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞"""
        self.key_blacklist.add(self.current_key_index)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        async def unblock():
            await asyncio.sleep(duration_minutes * 60)
            self.key_blacklist.discard(self.current_key_index)
        
        asyncio.create_task(unblock())

# ===== 2. –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í =====
@dataclass
class Alert:
    level: str  # INFO, WARNING, ERROR, CRITICAL
    message: str
    timestamp: datetime
    source: str
    metadata: Dict

class AlertManager:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏"""
    
    def __init__(self, telegram_bot, admin_chat_id: str):
        self.bot = telegram_bot
        self.admin_chat_id = admin_chat_id
        self.alert_history = []
        self.rate_limiter = {}
    
    async def send_alert(self, level: str, message: str, source: str = "bot", 
                        metadata: Dict = None, rate_limit_minutes: int = 30):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —Å rate limiting"""
        alert = Alert(level, message, datetime.now(), source, metadata or {})
        
        # Rate limiting –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
        alert_key = f"{level}_{source}_{hash(message)}"
        last_sent = self.rate_limiter.get(alert_key)
        
        if last_sent and (datetime.now() - last_sent).seconds < rate_limit_minutes * 60:
            return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
        
        self.rate_limiter[alert_key] = datetime.now()
        self.alert_history.append(alert)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        emoji_map = {
            "INFO": "‚ÑπÔ∏è",
            "WARNING": "‚ö†Ô∏è", 
            "ERROR": "‚ùå",
            "CRITICAL": "üö®"
        }
        
        formatted_message = (
            f"{emoji_map.get(level, 'üì¢')} <b>{level}</b>\n"
            f"üïê {alert.timestamp.strftime('%H:%M:%S')}\n"
            f"üìç {source}\n\n"
            f"{message}"
        )
        
        if metadata:
            formatted_message += f"\n\n<pre>{json.dumps(metadata, indent=2, ensure_ascii=False)}</pre>"
        
        try:
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=formatted_message,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç: {e}")

# ===== 3. –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´ =====
class HealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, alert_manager: AlertManager):
        self.alert_manager = alert_manager
        self.metrics = {
            "last_successful_cycle": None,
            "consecutive_failures": 0,
            "memory_usage_history": [],
            "api_response_times": [],
            "database_health": True
        }
    
    async def check_system_health(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if self.metrics["last_successful_cycle"]:
            time_since_success = datetime.now() - self.metrics["last_successful_cycle"]
            if time_since_success > timedelta(hours=4):
                issues.append(f"–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —É–∂–µ {time_since_success}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
        if self.metrics["consecutive_failures"] > 5:
            issues.append(f"–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {self.metrics['consecutive_failures']}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        import psutil
        memory_mb = psutil.Process().memory_info().rss / 1024 / 1024
        if memory_mb > 500:  # –ë–æ–ª—å—à–µ 500MB
            issues.append(f"–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} MB")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ API
        if self.metrics["api_response_times"]:
            avg_response = sum(self.metrics["api_response_times"][-10:]) / min(10, len(self.metrics["api_response_times"]))
            if avg_response > 30:  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ 30 —Å–µ–∫
                issues.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–µ API –æ—Ç–≤–µ—Ç—ã: {avg_response:.1f}s")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not self.metrics["database_health"]:
            issues.append("–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        if issues:
            await self.alert_manager.send_alert(
                "WARNING",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã:\n\n" + "\n".join(f"‚Ä¢ {issue}" for issue in issues),
                "health_monitor",
                {"issues_count": len(issues)}
            )
    
    def record_successful_cycle(self):
        """–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.metrics["last_successful_cycle"] = datetime.now()
        self.metrics["consecutive_failures"] = 0
    
    def record_failed_cycle(self, error: str):
        """–ó–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.metrics["consecutive_failures"] += 1
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –ø–æ—Å–ª–µ –º–Ω–æ–≥–∏—Ö –æ—à–∏–±–æ–∫
        if self.metrics["consecutive_failures"] == 10:
            asyncio.create_task(
                self.alert_manager.send_alert(
                    "CRITICAL",
                    f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: 10 –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥!\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {error}",
                    "health_monitor"
                )
            )

# ===== 4. –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê –ò –ó–õ–û–£–ü–û–¢–†–ï–ë–õ–ï–ù–ò–ô =====
class SpamProtection:
    """–ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π"""
    
    def __init__(self, max_requests_per_hour: int = 100):
        self.max_requests = max_requests_per_hour
        self.request_log = {}
        self.blocked_sources = set()
    
    def is_request_allowed(self, source: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å"""
        if source in self.blocked_sources:
            return False
        
        current_hour = datetime.now().strftime("%Y-%m-%d-%H")
        key = f"{source}_{current_hour}"
        
        requests_count = self.request_log.get(key, 0)
        return requests_count < self.max_requests
    
    def record_request(self, source: str):
        """–ó–∞–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞"""
        current_hour = datetime.now().strftime("%Y-%m-%d-%H")
        key = f"{source}_{current_hour}"
        self.request_log[key] = self.request_log.get(key, 0) + 1
    
    def block_source(self, source: str, duration_hours: int = 24):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        self.blocked_sources.add(source)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        async def unblock():
            await asyncio.sleep(duration_hours * 3600)
            self.blocked_sources.discard(source)
        
        asyncio.create_task(unblock())

# ===== 5. –ë–ï–ó–û–ü–ê–°–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
class SecureConfig:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, master_key: str = None):
        self.master_key = master_key or os.environ.get('MASTER_KEY') or self._generate_key()
    
    def _generate_key(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞"""
        return secrets.token_urlsafe(32)
    
    def encrypt_value(self, value: str) -> str:
        """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–µ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cryptography)
        key_bytes = self.master_key.encode()
        value_bytes = value.encode()
        
        encrypted = bytearray()
        for i, byte in enumerate(value_bytes):
            encrypted.append(byte ^ key_bytes[i % len(key_bytes)])
        
        return encrypted.hex()
    
    def decrypt_value(self, encrypted_value: str) -> str:
        """–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è"""
        encrypted_bytes = bytes.fromhex(encrypted_value)
        key_bytes = self.master_key.encode()
        
        decrypted = bytearray()
        for i, byte in enumerate(encrypted_bytes):
            decrypted.append(byte ^ key_bytes[i % len(key_bytes)])
        
        return decrypted.decode()
    
    def store_secret(self, key: str, value: str, file_path: str = "secrets.json"):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞"""
        encrypted_value = self.encrypt_value(value)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
        secrets_data = {}
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                secrets_data = json.load(f)
        
        secrets_data[key] = encrypted_value
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
        with open(file_path, 'w') as f:
            json.dump(secrets_data, f)
        
        os.chmod(file_path, 0o600)  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å

# ===== 6. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò =====
class SecurityLogger:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, log_file: str = "security.log"):
        self.log_file = log_file
        self.security_logger = logging.getLogger("security")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        handler = logging.FileHandler(log_file)
        formatter = logging.Formatter(
            '%(asctime)s - SECURITY - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        self.security_logger.addHandler(handler)
        self.security_logger.setLevel(logging.INFO)
    
    def log_suspicious_activity(self, activity: str, source: str, metadata: Dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.security_logger.warning(
            f"Suspicious activity: {activity} from {source}. Metadata: {metadata}"
        )
    
    def log_security_event(self, event: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        log_func = getattr(self.security_logger, level.lower())
        log_func(f"Security event: {event}")

# ===== 7. WEBHOOK –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ =====
class WebhookSecurity:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è webhook endpoints"""
    
    def __init__(self, secret_token: str):
        self.secret_token = secret_token
    
    def verify_signature(self, payload: bytes, signature: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook"""
        expected_signature = hmac.new(
            self.secret_token.encode(),
            payload,
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(f"sha256={expected_signature}", signature)
    
    def generate_signature(self, payload: bytes) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö webhook"""
        signature = hmac.new(
            self.secret_token.encode(),
            payload,
            hashlib.sha256
        ).hexdigest()
        
        return f"sha256={signature}" 