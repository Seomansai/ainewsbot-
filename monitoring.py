# –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è AI News Bot
import json
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass, asdict
from enum import Enum
import logging

class AlertLevel(Enum):
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"

@dataclass
class Metric:
    name: str
    value: float
    timestamp: datetime
    tags: Dict[str, str] = None

@dataclass
class Alert:
    level: AlertLevel
    message: str
    timestamp: datetime
    metric_name: Optional[str] = None
    metric_value: Optional[float] = None

class MetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""
    
    def __init__(self, storage_path: str = "metrics.json"):
        self.storage_path = storage_path
        self.metrics: Dict[str, List[Metric]] = {}
        self.alerts: List[Alert] = []
        self.alert_handlers: List[Callable] = []
        self.thresholds = self._default_thresholds()
        
    def _default_thresholds(self) -> Dict[str, Dict]:
        """–ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "error_rate": {"warning": 0.1, "critical": 0.3},  # 10% warning, 30% critical
            "processing_time": {"warning": 300, "critical": 600},  # 5 min warning, 10 min critical
            "api_cost": {"warning": 3.0, "critical": 4.5},  # $3 warning, $4.50 critical
            "memory_usage": {"warning": 80, "critical": 95},  # 80% warning, 95% critical
            "failed_news_ratio": {"warning": 0.2, "critical": 0.5}  # 20% warning, 50% critical
        }
    
    def counter(self, name: str, value: float = 1.0, tags: Dict[str, str] = None):
        """–°—á–µ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""
        metric = Metric(name, value, datetime.now(), tags)
        if name not in self.metrics:
            self.metrics[name] = []
        self.metrics[name].append(metric)
        self._check_thresholds(name, value)
    
    def gauge(self, name: str, value: float, tags: Dict[str, str] = None):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        metric = Metric(name, value, datetime.now(), tags)
        if name not in self.metrics:
            self.metrics[name] = []
        self.metrics[name].append(metric)
        self._check_thresholds(name, value)
    
    def timer(self, name: str):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        return TimerContext(self, name)
    
    def _check_thresholds(self, metric_name: str, value: float):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
        if metric_name not in self.thresholds:
            return
            
        thresholds = self.thresholds[metric_name]
        
        if value >= thresholds.get("critical", float('inf')):
            self._create_alert(AlertLevel.CRITICAL, f"{metric_name} –¥–æ—Å—Ç–∏–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è: {value}", metric_name, value)
        elif value >= thresholds.get("warning", float('inf')):
            self._create_alert(AlertLevel.WARNING, f"{metric_name} –ø—Ä–µ–≤—ã—Å–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {value}", metric_name, value)
    
    def _create_alert(self, level: AlertLevel, message: str, metric_name: str = None, metric_value: float = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert = Alert(level, message, datetime.now(), metric_name, metric_value)
        self.alerts.append(alert)
        
        # –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–ª–µ—Ä—Ç–æ–≤
        for handler in self.alert_handlers:
            try:
                handler(alert)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def add_alert_handler(self, handler: Callable[[Alert], None]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.alert_handlers.append(handler)
    
    def get_metrics_summary(self, hours: int = 24) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–µ—Ç—Ä–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        cutoff = datetime.now() - timedelta(hours=hours)
        summary = {}
        
        for metric_name, metrics in self.metrics.items():
            recent_metrics = [m for m in metrics if m.timestamp >= cutoff]
            if recent_metrics:
                values = [m.value for m in recent_metrics]
                summary[metric_name] = {
                    "count": len(values),
                    "sum": sum(values),
                    "avg": sum(values) / len(values),
                    "min": min(values),
                    "max": max(values),
                    "latest": values[-1]
                }
        
        return summary
    
    def get_health_score(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã (0-100)"""
        summary = self.get_metrics_summary(1)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        score = 100.0
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if "error_rate" in summary and summary["error_rate"]["avg"] > 0:
            score -= min(50, summary["error_rate"]["avg"] * 100)
        
        if "failed_requests" in summary:
            score -= min(20, summary["failed_requests"]["count"] * 2)
        
        if "processing_time" in summary and summary["processing_time"]["avg"] > 60:
            score -= min(30, (summary["processing_time"]["avg"] - 60) / 10)
        
        return max(0.0, score)
    
    def cleanup_old_data(self, hours: int = 168):  # 7 –¥–Ω–µ–π
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        cutoff = datetime.now() - timedelta(hours=hours)
        for metric_name in self.metrics:
            self.metrics[metric_name] = [
                m for m in self.metrics[metric_name] 
                if m.timestamp >= cutoff
            ]
    
    def export_prometheus(self) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus"""
        lines = []
        summary = self.get_metrics_summary(1)
        
        for metric_name, stats in summary.items():
            # Counter metrics
            if metric_name.endswith(("_total", "_count")):
                lines.append(f'# TYPE {metric_name} counter')
                lines.append(f'{metric_name} {stats["sum"]}')
            # Gauge metrics
            else:
                lines.append(f'# TYPE {metric_name} gauge')
                lines.append(f'{metric_name} {stats["latest"]}')
        
        return '\n'.join(lines)

class TimerContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, collector: MetricsCollector, name: str):
        self.collector = collector
        self.name = name
        self.start_time = None
    
    def __enter__(self):
        self.start_time = time.time()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        duration = time.time() - self.start_time
        self.collector.gauge(f"{self.name}_duration", duration)

class TelegramAlertHandler:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –≤ Telegram"""
    
    def __init__(self, bot_token: str, admin_chat_id: str):
        self.bot = Bot(token=bot_token)
        self.admin_chat_id = admin_chat_id
    
    async def handle_alert(self, alert: Alert):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        emoji_map = {
            AlertLevel.INFO: "‚ÑπÔ∏è",
            AlertLevel.WARNING: "‚ö†Ô∏è",
            AlertLevel.ERROR: "‚ùå",
            AlertLevel.CRITICAL: "üö®"
        }
        
        emoji = emoji_map.get(alert.level, "‚ùì")
        message = f"{emoji} <b>{alert.level.value.upper()}</b>\n\n{alert.message}\n\n<i>{alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}</i>"
        
        try:
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")

class HealthChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, metrics: MetricsCollector):
        self.metrics = metrics
    
    async def check_database_health(self, db_connection) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cursor = db_connection.execute("SELECT 1")
            result = cursor.fetchone()
            self.metrics.gauge("database_health", 1.0 if result else 0.0)
            return result is not None
        except Exception as e:
            logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.metrics.gauge("database_health", 0.0)
            return False
    
    async def check_api_health(self, client, test_model: str = "meta-llama/llama-3.1-8b-instruct:free") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = client.chat.completions.create(
                model=test_model,
                messages=[{"role": "user", "content": "Hello"}],
                max_tokens=5
            )
            self.metrics.gauge("api_health", 1.0)
            return True
        except Exception as e:
            logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å API: {e}")
            self.metrics.gauge("api_health", 0.0)
            return False
    
    async def check_telegram_health(self, bot) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Telegram –±–æ—Ç–∞"""
        try:
            me = await bot.get_me()
            self.metrics.gauge("telegram_health", 1.0 if me else 0.0)
            return me is not None
        except Exception as e:
            logging.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Telegram: {e}")
            self.metrics.gauge("telegram_health", 0.0)
            return False

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
class MonitoredAINewsBot:
    """AI News Bot —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    
    def __init__(self, config, metrics: MetricsCollector = None):
        self.config = config
        self.metrics = metrics or MetricsCollector()
        self.health_checker = HealthChecker(self.metrics)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
        if config.admin_telegram_id:
            alert_handler = TelegramAlertHandler(config.telegram_token, config.admin_telegram_id)
            self.metrics.add_alert_handler(lambda alert: asyncio.create_task(alert_handler.handle_alert(alert)))
    
    async def run_cycle_with_monitoring(self):
        """–¶–∏–∫–ª —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        start_time = time.time()
        
        try:
            with self.metrics.timer("news_cycle"):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                await self._health_checks()
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
                success_count = 0
                error_count = 0
                
                # ... –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ...
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.counter("news_processed", success_count)
                self.metrics.counter("news_failed", error_count)
                
                if success_count + error_count > 0:
                    error_rate = error_count / (success_count + error_count)
                    self.metrics.gauge("error_rate", error_rate)
                
                duration = time.time() - start_time
                self.metrics.gauge("cycle_duration", duration)
                
                # –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                health_score = self.metrics.get_health_score()
                self.metrics.gauge("health_score", health_score)
                
                logging.info(f"üìä –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–¥–æ—Ä–æ–≤—å–µ: {health_score:.1f}/100")
                
        except Exception as e:
            self.metrics.counter("cycle_errors")
            self.metrics._create_alert(AlertLevel.ERROR, f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {str(e)}")
            raise
    
    async def _health_checks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î, API, Telegram –∏ —Ç.–¥.
        pass 