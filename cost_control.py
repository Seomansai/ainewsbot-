# –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è AI News Bot
import json
import os
from datetime import datetime, timedelta
from typing import Dict, Optional
import logging

class CostTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ AI –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, max_monthly_budget: float = 5.0, storage_path: str = "cost_data.json"):
        self.max_monthly_budget = max_monthly_budget
        self.storage_path = storage_path
        self.costs = self._load_costs()
        
    def _load_costs(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
        try:
            if os.path.exists(self.storage_path):
                with open(self.storage_path, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö: {e}")
        
        return {
            "monthly_costs": {},
            "daily_costs": {},
            "model_usage": {}
        }
    
    def _save_costs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
        try:
            with open(self.storage_path, 'w') as f:
                json.dump(self.costs, f, indent=2)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö: {e}")
    
    def get_current_month_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
        return datetime.now().strftime("%Y-%m")
    
    def get_current_day_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
        return datetime.now().strftime("%Y-%m-%d")
    
    def can_afford_request(self, estimated_cost: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ–º –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –∑–∞–ø—Ä–æ—Å"""
        month_key = self.get_current_month_key()
        current_monthly_cost = self.costs["monthly_costs"].get(month_key, 0.0)
        
        return (current_monthly_cost + estimated_cost) <= self.max_monthly_budget
    
    def estimate_cost(self, model: str, input_tokens: int, output_tokens: int) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –¶–µ–Ω—ã –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2024)
        model_prices = {
            "anthropic/claude-3.5-sonnet": {"input": 3.0, "output": 15.0},
            "openai/gpt-4o": {"input": 2.5, "output": 10.0},
            "openai/gpt-3.5-turbo": {"input": 0.5, "output": 1.5},
            "meta-llama/llama-3.1-8b-instruct:free": {"input": 0.0, "output": 0.0},
            "microsoft/wizardlm-2-8x22b:free": {"input": 0.0, "output": 0.0},
        }
        
        if model not in model_prices:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å {model}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É")
            return (input_tokens * 1.0 + output_tokens * 3.0) / 1_000_000
        
        prices = model_prices[model]
        input_cost = (input_tokens * prices["input"]) / 1_000_000
        output_cost = (output_tokens * prices["output"]) / 1_000_000
        
        return input_cost + output_cost
    
    def record_usage(self, model: str, input_tokens: int, output_tokens: int, actual_cost: Optional[float] = None):
        """–ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if actual_cost is None:
            actual_cost = self.estimate_cost(model, input_tokens, output_tokens)
        
        month_key = self.get_current_month_key()
        day_key = self.get_current_day_key()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        if month_key not in self.costs["monthly_costs"]:
            self.costs["monthly_costs"][month_key] = 0.0
        self.costs["monthly_costs"][month_key] += actual_cost
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        if day_key not in self.costs["daily_costs"]:
            self.costs["daily_costs"][day_key] = 0.0
        self.costs["daily_costs"][day_key] += actual_cost
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        if model not in self.costs["model_usage"]:
            self.costs["model_usage"][model] = {
                "total_cost": 0.0,
                "total_requests": 0,
                "total_input_tokens": 0,
                "total_output_tokens": 0
            }
        
        model_stats = self.costs["model_usage"][model]
        model_stats["total_cost"] += actual_cost
        model_stats["total_requests"] += 1
        model_stats["total_input_tokens"] += input_tokens
        model_stats["total_output_tokens"] += output_tokens
        
        self._save_costs()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info(f"üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {model}: ${actual_cost:.4f} (–º–µ—Å—è—Ü: ${self.costs['monthly_costs'][month_key]:.2f})")
    
    def get_monthly_spending(self, month: Optional[str] = None) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        if month is None:
            month = self.get_current_month_key()
        return self.costs["monthly_costs"].get(month, 0.0)
    
    def get_remaining_budget(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞"""
        current_spending = self.get_monthly_spending()
        return max(0.0, self.max_monthly_budget - current_spending)
    
    def suggest_model(self, required_quality: str = "medium") -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±—é–¥–∂–µ—Ç–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        remaining = self.get_remaining_budget()
        
        if remaining <= 0:
            return "meta-llama/llama-3.1-8b-instruct:free"
        
        if required_quality == "high" and remaining > 1.0:
            return "anthropic/claude-3.5-sonnet"
        elif required_quality == "medium" and remaining > 0.1:
            return "openai/gpt-3.5-turbo"
        else:
            return "meta-llama/llama-3.1-8b-instruct:free"
    
    def cleanup_old_data(self, days_to_keep: int = 90):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cutoff_date = datetime.now() - timedelta(days=days_to_keep)
        cutoff_str = cutoff_date.strftime("%Y-%m-%d")
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        old_days = [day for day in self.costs["daily_costs"].keys() if day < cutoff_str]
        for day in old_days:
            del self.costs["daily_costs"][day]
        
        # –û—á–∏—Å—Ç–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤)
        cutoff_month = cutoff_date.strftime("%Y-%m")
        old_months = [month for month in self.costs["monthly_costs"].keys() if month < cutoff_month]
        for month in old_months[:-12]:  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –º–µ—Å—è—Ü–µ–≤
            del self.costs["monthly_costs"][month]
        
        self._save_costs()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
class SmartTranslator:
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å —É–º–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, openrouter_api_key: str, max_monthly_budget: float = 5.0):
        self.client = OpenAI(api_key=openrouter_api_key, base_url="https://openrouter.ai/api/v1")
        self.cost_tracker = CostTracker(max_monthly_budget)
    
    async def translate_news(self, text: str, quality: str = "medium") -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
        estimated_input_tokens = len(text) // 4  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        estimated_output_tokens = estimated_input_tokens // 2
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model = self.cost_tracker.suggest_model(quality)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—é–¥–∂–µ—Ç–∞
        estimated_cost = self.cost_tracker.estimate_cost(
            model, estimated_input_tokens, estimated_output_tokens
        )
        
        if not self.cost_tracker.can_afford_request(estimated_cost):
            logging.warning("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å")
            model = "meta-llama/llama-3.1-8b-instruct:free"
        
        try:
            response = self.client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": text}
                ],
                temperature=0.3
            )
            
            # –ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage = response.usage
            self.cost_tracker.record_usage(
                model, 
                usage.prompt_tokens, 
                usage.completion_tokens
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            raise 