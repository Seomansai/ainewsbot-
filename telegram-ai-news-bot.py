# Telegram AI News Bot
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è AI –Ω–æ–≤–æ—Å—Ç–µ–π

import asyncio
import sqlite3
import feedparser
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re
import os
from dataclasses import dataclass
from threading import Thread
from http.server import HTTPServer, SimpleHTTPRequestHandler

import aiohttp
from openai import OpenAI
from telegram import Bot
from telegram.error import TelegramError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ai_news_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
def run_server():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è keep-alive"""
    port = int(os.environ.get('PORT', 8000))
    
    class KeepAliveHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'AI News Bot is running!')
    
    server = HTTPServer(('', port), KeepAliveHandler)
    print(f"Keep-alive server running on port {port}")
    server.serve_forever()

@dataclass
class NewsItem:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    title: str
    description: str
    link: str
    published: datetime
    source: str
    translated_title: str = ""
    translated_description: str = ""

class AINewsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è AI –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
        
        # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
        self.db_path = os.getenv('DATABASE_PATH', 'ai_news.db')
        
        if not self.bot_token or not self.channel_id:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID")
        
        self.bot = Bot(token=self.bot_token)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter –∫–ª–∏–µ–Ω—Ç–∞
        self.client = None
        if self.openrouter_api_key:
            self.client = OpenAI(
                api_key=self.openrouter_api_key,
                base_url="https://openrouter.ai/api/v1"
            )
            logger.info("‚úÖ OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤")
        else:
            logger.warning("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Google Translator")
        
        # RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ AI –Ω–æ–≤–æ—Å—Ç–µ–π
        self.rss_sources = {
            'AI News': 'https://www.artificialintelligence-news.com/feed/',
            'MIT Technology Review': 'https://www.technologyreview.com/feed/',
            'The Verge AI': 'https://www.theverge.com/ai-artificial-intelligence/rss/index.xml',
            'TechCrunch AI': 'https://techcrunch.com/category/artificial-intelligence/feed/',
            'VentureBeat AI': 'https://venturebeat.com/ai/feed/',
            'Ars Technica': 'https://feeds.arstechnica.com/arstechnica/technology-lab',
            'AI Magazine': 'https://magazine.aaai.org/index.php/aimagazine/gateway/plugin/WebFeedGatewayPlugin/atom'
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ AI –Ω–æ–≤–æ—Å—Ç–µ–π
        self.ai_keywords = [
            'ai', 'artificial intelligence', 'machine learning', 'neural network',
            'deep learning', 'chatgpt', 'openai', 'automation', 'robotics',
            'algorithm', 'nlp', 'computer vision', 'tensorflow', 'pytorch',
            'gpt', 'llm', 'large language model', 'generative ai', 'anthropic',
            'claude', 'gemini', 'bard', 'hugging face', 'transformer'
        ]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        self.conn = sqlite3.connect(self.db_path, check_same_thread=False)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        self.conn.execute("""
            CREATE TABLE IF NOT EXISTS published_news (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                link TEXT UNIQUE NOT NULL,
                title TEXT,
                source TEXT,
                published_date DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.conn.execute("CREATE INDEX IF NOT EXISTS idx_link ON published_news(link)")
        self.conn.commit()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        count = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
        logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞. –£–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    async def fetch_rss_feed(self, url: str) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ RSS —Ñ–∏–¥–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=30) as response:
                    content = await response.text()
                    feed = feedparser.parse(content)
                    return feed.entries
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS —Ñ–∏–¥–∞ {url}: {e}")
            return []
    
    def is_ai_related(self, title: str, description: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∫ AI"""
        text = (title + " " + description).lower()
        return any(keyword in text for keyword in self.ai_keywords)
    
    def is_already_published(self, link: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"""
        cursor = self.conn.execute(
            "SELECT 1 FROM published_news WHERE link = ?", (link,)
        )
        result = cursor.fetchone() is not None
        if result:
            logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {link[:50]}...")
        else:
            logger.info(f"‚úÖ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {link[:50]}...")
        return result
    
    def mark_as_published(self, news: NewsItem):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é"""
        self.conn.execute(
            "INSERT OR IGNORE INTO published_news (link, title, source, published_date) VALUES (?, ?, ?, ?)",
            (news.link, news.title, news.source, news.published)
        )
        self.conn.commit()
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {news.title[:50]}...")
    
    def translate_text(self, text: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
        try:
            if len(text) > 3000:
                text = text[:3000] + "..."
            
            if self.client:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞
                response = self.client.chat.completions.create(
                    model="anthropic/claude-3.5-sonnet",  # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞
                    messages=[
                        {
                            "role": "system", 
                            "content": """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ.

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü–†–ê–í–ò–õ–ê:
1. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
2. –í—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—É—é —Å—É—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
3. –î–æ–±–∞–≤—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ (—Ü–∏—Ñ—Ä—ã, –∫–æ–º–ø–∞–Ω–∏–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
4. –°–æ—Ö—Ä–∞–Ω—è–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: AI, ML, API, GPU, LLM
5. –û–±—ä–µ–º: 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
6. –°—Ç–∏–ª—å: –∫–∞–∫ –∫—Ä–∞—Ç–∫–∞—è –Ω–æ–≤–æ—Å—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞

–ü–†–ò–ú–ï–†:
–û—Ä–∏–≥–∏–Ω–∞–ª: "OpenAI releases GPT-4 Turbo with improved reasoning..."
–ü–µ—Ä–µ—Å–∫–∞–∑: "–ö–æ–º–ø–∞–Ω–∏—è OpenAI –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é GPT-4 Turbo —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è. –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–¥–∞—á–∞—Ö, —Ç—Ä–µ–±—É—é—â–∏—Ö –º–Ω–æ–≥–æ—Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."

–°–æ–∑–¥–∞–≤–∞–π –ø–µ—Ä–µ—Å–∫–∞–∑ –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
                        },
                        {
                            "role": "user", 
                            "content": f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {text.split('.')[0] if '.' in text else text[:100]}\n–¢–µ–∫—Å—Ç: {text}"
                        }
                    ],
                    temperature=0.3,
                    max_tokens=800
                )
                return response.choices[0].message.content.strip()
            else:
                # Fallback –Ω–∞ Google Translator
                from deep_translator import GoogleTranslator
                translator = GoogleTranslator(source='en', target='ru')
                return translator.translate(text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —á–µ—Ä–µ–∑ OpenRouter: {e}")
            # Fallback –Ω–∞ Google Translator –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                from deep_translator import GoogleTranslator
                translator = GoogleTranslator(source='en', target='ru')
                return translator.translate(text)
            except:
                return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def parse_news_sources(self) -> List[NewsItem]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        all_news = []
        
        for source_name, rss_url in self.rss_sources.items():
            logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_name}")
            entries = await self.fetch_rss_feed(rss_url)
            
            for entry in entries:
                try:
                    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    published = datetime.now()
                    if hasattr(entry, 'published_parsed') and entry.published_parsed:
                        published = datetime(*entry.published_parsed[:6])
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
                    news = NewsItem(
                        title=entry.get('title', ''),
                        description=entry.get('summary', ''),
                        link=entry.get('link', ''),
                        published=published,
                        source=source_name
                    )
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ AI —Ç–µ–º–∞—Ç–∏–∫–µ
                    if self.is_ai_related(news.title, news.description):
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if not self.is_already_published(news.link):
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                            if published > datetime.now() - timedelta(hours=24):
                                all_news.append(news)
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {source_name}: {e}")
        
        return all_news
    
    async def translate_news(self, news_list: List[NewsItem]) -> List[NewsItem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"""
        for news in news_list:
            try:
                logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Å–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–∏: {news.title[:50]}...")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                news.translated_title = news.title
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –æ–ø–∏—Å–∞–Ω–∏—è
                full_text = f"{news.title}. {news.description}"
                news.translated_description = self.translate_text(full_text)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                news.translated_title = news.title
                news.translated_description = news.description
        
        return news_list
    
    def format_message(self, news: NewsItem) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        # –û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        import html
        
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤
        title = html.escape(news.translated_title)
        summary = html.escape(news.translated_description)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
        import re
        summary = re.sub(r'<[^>]+>', '', summary)
        title = re.sub(r'<[^>]+>', '', title)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"ü§ñ <b>AI –ù–æ–≤–æ—Å—Ç–∏</b>\n\n"
        
        if summary:
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ—Å–∫–∞–∑
            message += f"{summary}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        message += f"üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {news.source}\n"
        message += f"üîó <b><a href='{news.link}'>–ß–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª —Å—Ç–∞—Ç—å–∏</a></b>"
        
        return message
    
    async def publish_news(self, news_list: List[NewsItem]):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –∫–∞–Ω–∞–ª"""
        for news in news_list:
            try:
                message = self.format_message(news)
                
                await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=message,
                    parse_mode='HTML',
                    disable_web_page_preview=False
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
                self.mark_as_published(news)
                
                logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news.title[:50]}...")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                await asyncio.sleep(3)
                
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
            except Exception as e:
                logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    def cleanup_old_records(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        cutoff_date = datetime.now() - timedelta(days=7)
        self.conn.execute(
            "DELETE FROM published_news WHERE created_at < ?",
            (cutoff_date,)
        )
        self.conn.commit()
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        cursor = self.conn.execute(
            "SELECT COUNT(*) FROM published_news WHERE created_at > ?",
            (datetime.now() - timedelta(hours=24),)
        )
        last_24h = cursor.fetchone()[0]
        
        cursor = self.conn.execute("SELECT COUNT(*) FROM published_news")
        total = cursor.fetchone()[0]
        
        return {
            'total_published': total,
            'last_24h': last_24h,
            'status': 'active'
        }
    
    async def run_news_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            total_count = self.get_statistics()['total_published']
            logger.info(f"üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞. –í –ë–î —É–∂–µ {total_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            raw_news = await self.parse_news_sources()
            logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(raw_news)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            if not raw_news:
                logger.info("‚ùå –ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤
            logger.info("ü§ñ –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Å–∫–∞–∑—ã –Ω–æ–≤–æ—Å—Ç–µ–π...")
            translated_news = await self.translate_news(raw_news)
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            logger.info(f"üì¢ –ü—É–±–ª–∏–∫—É–µ–º {len(translated_news)} –Ω–æ–≤–æ—Å—Ç–µ–π...")
            await self.publish_news(translated_news)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            new_total = self.get_statistics()['total_published']
            published_count = new_total - total_count
            logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count} –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
        logger.info("–ó–∞–ø—É—Å–∫ AI News Bot...")
        
        while True:
            try:
                await self.run_news_cycle()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ 2 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 2 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(7200)  # 2 —á–∞—Å–∞
                
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(300)  # –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è keep-alive
    server_thread = Thread(target=run_server, daemon=True)
    server_thread.start()
    
    try:
        bot = AINewsBot()
        await bot.start_bot()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if 'bot' in locals():
            bot.conn.close()

if __name__ == "__main__":
    asyncio.run(main())