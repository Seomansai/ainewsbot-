# Telegram AI News Bot
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è AI –Ω–æ–≤–æ—Å—Ç–µ–π

import asyncio
import sqlite3
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re
import os
import json
import time
import random
from dataclasses import dataclass
from threading import Thread, Lock
from http.server import HTTPServer, SimpleHTTPRequestHandler

import aiohttp
from telegram import Bot
from telegram.error import TelegramError, RetryAfter, TimedOut

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ai_news_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== RETRY –î–ï–ö–û–†–ê–¢–û–† =====
def retry_with_backoff(max_attempts: int = 3, base_delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry —Å exponential backoff"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except (TelegramError, aiohttp.ClientError, Exception) as e:
                    last_exception = e
                    
                    if attempt == max_attempts - 1:
                        break
                    
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å jitter
                    delay = base_delay * (2 ** attempt) + random.uniform(0, 1)
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å: {e}")
                    await asyncio.sleep(delay)
            
            logger.error(f"–í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã: {last_exception}")
            raise last_exception
        
        return wrapper
    return decorator

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
def run_server():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è keep-alive"""
    port = int(os.environ.get('PORT', 8000))
    
    class KeepAliveHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'AI News Bot is running!')
    
    server = HTTPServer(('', port), KeepAliveHandler)
    print(f"Keep-alive server running on port {port}")
    server.serve_forever()

@dataclass
class NewsItem:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    title: str
    description: str
    link: str
    published: datetime
    source: str
    translated_title: str = ""
    translated_description: str = ""

class AINewsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è AI –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.newsapi_key = os.getenv('NEWSAPI_KEY')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.max_news_per_cycle = int(os.getenv('MAX_NEWS_PER_CYCLE', '10'))
        self.admin_telegram_id = os.getenv('ADMIN_TELEGRAM_ID')
        
        # –£–º–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path_env = os.getenv('DATABASE_PATH', 'ai_news.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        if os.path.exists('/opt/render') or os.getenv('RENDER'):
            # –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            self.db_path = '/opt/render/project/ai_news.db'
        elif os.path.exists('/app'):  # Railway/Heroku
            self.db_path = '/app/ai_news.db'
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            self.db_path = db_path_env
        
        logger.info(f"üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        if not self.bot_token or not self.channel_id:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID")
        
        self.bot = Bot(token=self.bot_token)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ NewsAPI –∫–ª—é—á–∞
        if not self.newsapi_key:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å NEWSAPI_KEY –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        logger.info("üÜì –ë–ï–°–ü–õ–ê–¢–ù–´–ô NewsAPI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        logger.info("üí∞ –≠–∫–æ–Ω–æ–º–∏—è: $5/–º–µ—Å—è—Ü (–±–µ–∑ Claude)")
        logger.info("üìà –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NewsAPI –¥–∞–Ω–Ω—ã—Ö")
        
        # ===== NEWS API –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ AI –Ω–æ–≤–æ—Å—Ç–µ–π
        self.ai_keywords = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ AI —Ç–µ—Ä–º–∏–Ω—ã
            "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
            "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å",
            "–Ω–µ–π—Ä–æ—Å–µ—Ç—å",
            "–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–ò–ò —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
            "–æ–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞",
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ AI –ø—Ä–æ–¥—É–∫—Ç—ã
            "ChatGPT",
            "GPT-4",
            "Yandex GPT",
            "GigaChat",
            "Claude",
            "Gemini",
            "Kandinsky",
            "Midjourney",
            "DALL-E",
            
            # –†–æ—Å—Å–∏–π—Å–∫–∏–µ AI
            "–°–±–µ—Ä AI",
            "–Ø–Ω–¥–µ–∫—Å –ò–ò",
            "–ú–¢–° AI",
            "–¢–∏–Ω—å–∫–æ—Ñ—Ñ AI",
            "VK AI",
            "Huawei AI",
            
            # –ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã
            "AI —Å—Ç–∞—Ä—Ç–∞–ø",
            "–ò–ò —Å—Ç–∞—Ä—Ç–∞–ø",
            "AI –∫–æ–º–ø–∞–Ω–∏—è",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ",
            "—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è",
            "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            "—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
            "–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫–∏",
            "—É–º–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π",
            "–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ",
            "–∞–ª–≥–æ—Ä–∏—Ç–º—ã",
            "data science",
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ AI
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ò–ò",
            "—Ñ–∏–Ω—Ç–µ—Ö –ò–ò",
            "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ò–ò",
            "—É–º–Ω—ã–π –≥–æ—Ä–æ–¥",
            "–∞–≤—Ç–æ–ø–∏–ª–æ—Ç",
            "–≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏"
        ]
        
        # –ì—Ä—É–ø–ø—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.keyword_groups = [
            # –ì—Ä—É–ø–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ AI —Ç–µ—Ä–º–∏–Ω—ã
            ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å"],
            # –ì—Ä—É–ø–ø–∞ 2: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            ["ChatGPT", "Yandex GPT", "GigaChat"],
            # –ì—Ä—É–ø–ø–∞ 3: –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            ["–°–±–µ—Ä AI", "–Ø–Ω–¥–µ–∫—Å –ò–ò", "VK AI"],
            # –ì—Ä—É–ø–ø–∞ 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            ["—Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞", "–∞–≤—Ç–æ–ø–∏–ª–æ—Ç", "—É–º–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"],
            # –ì—Ä—É–ø–ø–∞ 5: –°—Ç–∞—Ä—Ç–∞–ø—ã –∏ –±–∏–∑–Ω–µ—Å
            ["AI —Å—Ç–∞—Ä—Ç–∞–ø", "—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ"]
        ]
        
        # –†—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è NewsAPI
        self.russian_sources = [
            "rbc.ru",
            "lenta.ru", 
            "ria.ru",
            "tass.ru",
            "rt.com",
            "gazeta.ru",
            "kommersant.ru",
            "vedomosti.ru",
            "forbes.ru",
            "cnews.ru"
        ]
        
        # Thread-safe –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self._db_lock = Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        logger.info(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            try:
                os.makedirs(db_dir, exist_ok=True)
                logger.info(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {db_dir}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {db_dir}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        try:
            test_file = os.path.join(db_dir if db_dir else '.', 'test_write.tmp')
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ë–î –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∑–∞–ø–∏—Å–∏: {e}")
        
        with self._db_lock:
            try:
                self.conn = sqlite3.connect(self.db_path, check_same_thread=False)
                
                # –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS published_news (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        link TEXT UNIQUE NOT NULL,
                        title TEXT,
                        source TEXT,
                        published_date DATETIME,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        status TEXT DEFAULT 'reserved'
                    )
                """)
                
                # –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                cursor = self.conn.execute("PRAGMA table_info(published_news)")
                columns = [col[1] for col in cursor.fetchall()]
                
                if 'status' not in columns:
                    logger.info("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'status'")
                    self.conn.execute("ALTER TABLE published_news ADD COLUMN status TEXT DEFAULT 'published'")
                    # –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
                    self.conn.execute("UPDATE published_news SET status = 'published' WHERE status IS NULL")
                    self.conn.commit()
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                self.conn.execute("CREATE INDEX IF NOT EXISTS idx_link ON published_news(link)")
                self.conn.execute("CREATE INDEX IF NOT EXISTS idx_status ON published_news(status)")
                self.conn.execute("CREATE INDEX IF NOT EXISTS idx_created_at ON published_news(created_at)")
                
                self.conn.commit()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                count = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
                published_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'").fetchone()[0]
                reserved_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'reserved'").fetchone()[0]
                
                logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞. –í—Å–µ–≥–æ: {count} | –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count} | –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {reserved_count}")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
                old_reserved = datetime.now() - timedelta(hours=1)
                deleted = self.conn.execute(
                    "DELETE FROM published_news WHERE status = 'reserved' AND created_at < ?", 
                    (old_reserved,)
                ).rowcount
                
                if deleted > 0:
                    self.conn.commit()
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                raise
    
    @retry_with_backoff(max_attempts=3, base_delay=2.0)
    async def fetch_news_from_api(self, keyword: str, page_size: int = 20) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI.org"""
        try:
            url = "https://newsapi.org/v2/everything"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'apiKey': self.newsapi_key,
                'q': keyword,
                'language': 'ru',  # –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
                'sortBy': 'publishedAt',  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ
                'pageSize': page_size,
                'from': (datetime.now() - timedelta(hours=24)).strftime('%Y-%m-%d'),  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                'domains': ','.join(self.russian_sources)  # –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            }
            
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        articles = data.get('articles', [])
                        logger.info(f"‚úÖ NewsAPI: –Ω–∞–π–¥–µ–Ω–æ {len(articles)} –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ '{keyword}'")
                        return articles
                    elif response.status == 429:
                        logger.warning("‚ö†Ô∏è NewsAPI rate limit –ø—Ä–µ–≤—ã—à–µ–Ω")
                        return []
                    else:
                        logger.error(f"‚ùå NewsAPI –æ—à–∏–±–∫–∞: HTTP {response.status}")
                        return []
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ API: {e}")
            raise
    
    async def parse_news_sources(self) -> List[NewsItem]:
        """–£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        all_news = []
        
        # –£–º–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è: –±–µ—Ä–µ–º –æ–¥–Ω—É –≥—Ä—É–ø–ø—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        import time
        current_hour = datetime.now().hour
        group_index = current_hour % len(self.keyword_groups)  # –ú–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∂–¥—ã–π —á–∞—Å
        
        active_group = self.keyword_groups[group_index]
        logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ #{group_index + 1}: {active_group}")
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        priority_keywords = ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "ChatGPT", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å"]
        all_active_keywords = list(set(active_group + priority_keywords))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        
        for keyword in all_active_keywords:
            try:
                logger.info(f"üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ '{keyword}' —á–µ—Ä–µ–∑ NewsAPI...")
                articles = await self.fetch_news_from_api(keyword, page_size=15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                
                if not articles:
                    logger.info(f"‚ùå –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ '{keyword}'")
                    continue
                
                logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π –ø–æ '{keyword}'")
                
                for article in articles:
                    try:
                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        published_str = article.get('publishedAt', '')
                        if published_str:
                            # –ü–∞—Ä—Å–∏–Ω–≥ ISO —Ñ–æ—Ä–º–∞—Ç–∞: 2024-01-15T10:30:00Z
                            published = datetime.fromisoformat(published_str.replace('Z', '+00:00')).replace(tzinfo=None)
                        else:
                            published = datetime.now()
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                        source_name = article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
                        news = NewsItem(
                            title=article.get('title', ''),
                            description=article.get('description', ''),
                            link=article.get('url', ''),
                            published=published,
                            source=source_name
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                        if not self.is_already_published(news.link, news.title):
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                            if published > datetime.now() - timedelta(hours=24):
                                all_news.append(news)
                                logger.info(f"‚úÖ AI –Ω–æ–≤–æ—Å—Ç—å: {news.title[:50]}...")
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
                        continue
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (NewsAPI –ª–∏–º–∏—Ç—ã)
                await asyncio.sleep(1)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ '{keyword}': {e}")
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
        unique_news = self.deduplicate_news(all_news)
        
        logger.info(f"üìä NewsAPI –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(unique_news)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {len(all_news)}")
        logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(all_active_keywords)}")
        return unique_news
    
    def deduplicate_news(self, news_list: List[NewsItem]) -> List[NewsItem]:
        """–£–º–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        seen_links = set()
        seen_titles = set()
        unique_news = []
        
        for news in news_list:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ
            if news.link in seen_links:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (–ø–µ—Ä–≤—ã–µ 60 —Å–∏–º–≤–æ–ª–æ–≤)
            title_key = news.title.lower()[:60].strip()
            if title_key in seen_titles:
                continue
            
            seen_links.add(news.link)
            seen_titles.add(title_key)
            unique_news.append(news)
        
        return unique_news
    
    def is_already_published(self, link: str, title: str = "") -> bool:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Ö–æ–∂–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        with self._db_lock:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            cursor = self.conn.execute(
                "SELECT status FROM published_news WHERE link = ?", (link,)
            )
            result = cursor.fetchone()
            if result is not None:
                status = result[0]
                logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å: {status}): {link[:50]}...")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ—Ö–æ–∂–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if title and len(title) > 20:
                # –£–ø—Ä–æ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                clean_title = self._clean_title_for_comparison(title)
                
                cursor = self.conn.execute(
                    "SELECT title, status FROM published_news WHERE created_at > datetime('now', '-7 days')"
                )
                existing_titles = cursor.fetchall()
                
                for (existing_title, status) in existing_titles:
                    if existing_title:
                        clean_existing = self._clean_title_for_comparison(existing_title)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å (>80% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                        if self._calculate_similarity(clean_title, clean_existing) > 0.8:
                            logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (—Å—Ç–∞—Ç—É—Å: {status}): {title[:50]}... ‚âà {existing_title[:50]}...")
                            return True
            
            logger.info(f"‚úÖ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {link[:50]}...")
            return False
    
    def _clean_title_for_comparison(self, title: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        import re
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        cleaned = re.sub(r'[^\w\s]', '', title.lower())
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = ' '.join(cleaned.split())
        return cleaned
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)"""
        if not text1 or not text2:
            return 0.0
        
        words1 = set(text1.split())
        words2 = set(text2.split())
        
        if not words1 or not words2:
            return 0.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union) if union else 0.0
    
    def mark_as_published(self, news: NewsItem):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ 'published'"""
        with self._db_lock:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å reserved –Ω–∞ published
                cursor = self.conn.execute(
                    "UPDATE published_news SET status = 'published' WHERE link = ?",
                    (news.link,)
                )
                
                if cursor.rowcount == 0:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
                    self.conn.execute(
                        "INSERT OR IGNORE INTO published_news (link, title, source, published_date, status) VALUES (?, ?, ?, ?, 'published')",
                        (news.link, news.title, news.source, news.published)
                    )
                
                self.conn.commit()
                logger.info(f"üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'published': {news.title[:50]}...")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
    
    def reserve_news_for_processing(self, news_list: List[NewsItem]) -> List[NewsItem]:
        """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
        reserved_news = []
        
        with self._db_lock:
            for news in news_list:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
                    cursor = self.conn.execute(
                        "INSERT OR IGNORE INTO published_news (link, title, source, published_date, status) VALUES (?, ?, ?, ?, 'reserved')",
                        (news.link, news.title, news.source, news.published)
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–π
                    if cursor.rowcount > 0:
                        reserved_news.append(news)
                        logger.info(f"üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {news.title[:50]}...")
                    else:
                        logger.info(f"üîÑ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {news.title[:50]}...")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            
            self.conn.commit()
        
        logger.info(f"‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {len(reserved_news)} –∏–∑ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        return reserved_news
    
    def detect_language(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (ru –∏–ª–∏ en)"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        cyrillic_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è')
        latin_chars = sum(1 for char in text if 'a' <= char.lower() <= 'z')
        
        if cyrillic_chars > latin_chars:
            return 'ru'
        else:
            return 'en'
    
    async def process_news(self, news_list: List[NewsItem]) -> List[NewsItem]:
        """–ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ NewsAPI (–±–µ–∑ AI)"""
        for news in news_list:
            try:
                logger.info(f"üá∑üá∫ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏: {news.title[:50]}...")
                
                # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                news.translated_title = self.clean_html(news.title)
                
                # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –∏–∑ title + description
                title_clean = self.clean_html(news.title)
                desc_clean = self.clean_html(news.description) if news.description else ""
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                if desc_clean and len(desc_clean) > 10:
                    # –ë–µ—Ä–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ
                    news.translated_description = desc_clean[:200] + ("..." if len(desc_clean) > 200 else "")
                else:
                    # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    news.translated_description = title_clean
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await asyncio.sleep(0.5)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                news.translated_title = self.clean_html(news.title)
                news.translated_description = self.clean_html(news.description) if news.description else self.clean_html(news.title)
        
        return news_list
    
    def clean_html(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        import re
        import html
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
        text = html.unescape(text)
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (Telegram –ª–∏–º–∏—Ç)
        if len(text) > 800:
            text = text[:800] + "..."
        
        return text
    
    def format_message(self, news: NewsItem) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ"""
        import html
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å–∫–∞–∑ –æ—Ç Claude –∏–ª–∏ –æ—á–∏—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        content = news.translated_description if news.translated_description else news.description
        content = html.escape(content.strip())
        
        # –§–ª–∞–≥ –†–æ—Å—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_flag = "üá∑üá∫"
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: –ø–µ—Ä–µ—Å–∫–∞–∑ + –∏—Å—Ç–æ—á–Ω–∏–∫
        message = f"{content}\n\n{source_flag} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {news.source}"
        
        return message
    
    @retry_with_backoff(max_attempts=3, base_delay=2.0)
    async def publish_news(self, news_list: List[NewsItem]):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –∫–∞–Ω–∞–ª —Å retry"""
        published_count = 0
        
        for news in news_list[:self.max_news_per_cycle]:
            try:
                message = self.format_message(news)
                
                await self._send_telegram_message(message)
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
                self.mark_as_published(news)
                published_count += 1
                
                logger.info(f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news.title[:50]}...")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (Telegram rate limit)
                await asyncio.sleep(3)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news.title[:50]}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if self.admin_telegram_id:
                    await self._send_admin_alert(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)[:100]}")
        
        return published_count
    
    @retry_with_backoff(max_attempts=5, base_delay=1.0)
    async def _send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits"""
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
        except RetryAfter as e:
            logger.warning(f"Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            raise  # Retry decorator –ø–æ–≤—Ç–æ—Ä–∏—Ç
        except TimedOut:
            logger.warning("Telegram timeout, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞")
            raise  # Retry decorator –ø–æ–≤—Ç–æ—Ä–∏—Ç
        except TelegramError as e:
            logger.error(f"Telegram error: {e}")
            raise
    
    async def _send_admin_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not self.admin_telegram_id:
            return
            
        try:
            alert_message = f"ü§ñ <b>AI News Bot Alert</b>\n\n{message}\n\n<i>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            await self.bot.send_message(
                chat_id=self.admin_telegram_id,
                text=alert_message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    def cleanup_old_records(self):
        """–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self._db_lock:
            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=30)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
            total_before = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            cursor = self.conn.execute(
                "DELETE FROM published_news WHERE created_at < ?",
                (cutoff_date,)
            )
            deleted_count = cursor.rowcount
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.conn.execute("VACUUM")
            self.conn.commit()
            
            total_after = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ë–î: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π. –û—Å—Ç–∞–ª–æ—Å—å: {total_after}")
            else:
                logger.info(f"üìä –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞: {total_after} –∑–∞–ø–∏—Å–µ–π, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    def get_duplicate_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"""
        with self._db_lock:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now() - timedelta(days=7)
            
            cursor = self.conn.execute(
                "SELECT COUNT(*) FROM published_news WHERE created_at > ?",
                (week_ago,)
            )
            week_count = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            total_count = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            
            return {
                'total_saved': total_count,
                'last_week': week_count,
                'estimated_duplicates_blocked': max(0, week_count * 2)  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            }
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        with self._db_lock:
            cursor = self.conn.execute(
                "SELECT COUNT(*) FROM published_news WHERE status = 'published' AND created_at > ?",
                (datetime.now() - timedelta(hours=24),)
            )
            last_24h = cursor.fetchone()[0]
            
            cursor = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'")
            total = cursor.fetchone()[0]
        
        return {
            'total_published': total,
            'last_24h': last_24h,
            'mode': 'free_newsapi',
            'status': 'active'
        }
    
    async def run_news_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        cycle_start_time = time.time()
        
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            stats = self.get_statistics()
            current_hour = datetime.now().hour
            group_index = current_hour % len(self.keyword_groups)
            active_group = self.keyword_groups[group_index]
            
            logger.info(f"üìä –ó–∞–ø—É—Å–∫ –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û —Ü–∏–∫–ª–∞. –ë–î: {stats['total_published']} –Ω–æ–≤–æ—Å—Ç–µ–π")
            logger.info(f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {', '.join(active_group)}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ News API
            logger.info("üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ AI –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ NewsAPI.org...")
            raw_news = await self.parse_news_sources()
            logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(raw_news)} –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ —É–º–Ω—ã–π –ø–æ–∏—Å–∫")
            
            if not raw_news:
                logger.info("‚ùå –ù–æ–≤—ã–µ AI –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ù–û–í–û–ï: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            logger.info("üîí –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            reserved_news = self.reserve_news_for_processing(raw_news)
            
            if not reserved_news:
                logger.info("‚ùå –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
                return
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ NewsAPI –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(reserved_news)} NewsAPI –Ω–æ–≤–æ—Å—Ç–µ–π...")
            processed_news = await self.process_news(reserved_news)
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            logger.info(f"üì¢ –ü—É–±–ª–∏–∫—É–µ–º –¥–æ {self.max_news_per_cycle} –Ω–æ–≤–æ—Å—Ç–µ–π...")
            published_count = await self.publish_news(processed_news)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cycle_duration = time.time() - cycle_start_time
            new_stats = self.get_statistics()
            
            logger.info(f"‚úÖ –ë–ï–°–ü–õ–ê–¢–ù–´–ô —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É
            if self.admin_telegram_id and published_count > 0:
                await self._send_admin_alert(
                    f"üìä –ë–ï–°–ü–õ–ê–¢–ù–´–ô NewsAPI —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                    f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(raw_news)}\n"
                    f"‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(reserved_news)}\n"
                    f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {cycle_duration:.1f}—Å\n"
                    f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: $5/–º–µ—Å—è—Ü"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É
            if self.admin_telegram_id:
                await self._send_admin_alert(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            
            raise
    
    def database_diagnostics(self) -> Dict:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self._db_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
            db_exists = os.path.exists(self.db_path)
            db_size = os.path.getsize(self.db_path) if db_exists else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            total_records = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            published_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'").fetchone()[0]
            reserved_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'reserved'").fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor = self.conn.execute(
                "SELECT link, title, status, created_at FROM published_news ORDER BY created_at DESC LIMIT 5"
            )
            recent_records = cursor.fetchall()
            
            # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            day_ago = datetime.now() - timedelta(hours=24)
            cursor = self.conn.execute(
                "SELECT COUNT(*) FROM published_news WHERE created_at > ?", (day_ago,)
            )
            recent_count = cursor.fetchone()[0]
            
            return {
                'db_path': self.db_path,
                'db_exists': db_exists,
                'db_size_bytes': db_size,
                'total_records': total_records,
                'published_count': published_count,
                'reserved_count': reserved_count,
                'recent_24h': recent_count,
                'recent_records': recent_records
            }

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI News Bot...")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        db_diagnostics = self.database_diagnostics()
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î:")
        logger.info(f"  ‚Ä¢ –ü—É—Ç—å: {db_diagnostics['db_path']}")
        logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {db_diagnostics['db_size_bytes']} –±–∞–π—Ç")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_diagnostics['total_records']}")
        logger.info(f"  ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_diagnostics['published_count']}")
        logger.info(f"  ‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {db_diagnostics['reserved_count']}")
        logger.info(f"  ‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {db_diagnostics['recent_24h']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            from bot_monitoring import add_monitoring_to_bot
            add_monitoring_to_bot(self)
            logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω—É —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        if self.admin_telegram_id:
            startup_message = (
                f"üöÄ AI News Bot –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                f"‚Ä¢ –†–µ–∂–∏–º: –ë–ï–°–ü–õ–ê–¢–ù–´–ô NewsAPI.org\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞: –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è: $5/–º–µ—Å—è—Ü (–±–µ–∑ Claude)\n"
                f"‚Ä¢ –ú–∞–∫—Å –Ω–æ–≤–æ—Å—Ç–µ–π: {self.max_news_per_cycle}\n\n"
                f"<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
                f"‚Ä¢ –ü—É—Ç—å: {db_diagnostics['db_path']}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä: {db_diagnostics['db_size_bytes']} –±–∞–π—Ç\n"
                f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_diagnostics['published_count']}\n"
                f"‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {db_diagnostics['reserved_count']}\n"
                f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {db_diagnostics['recent_24h']}"
            )
            await self._send_admin_alert(startup_message)
        
        while True:
            try:
                await self.run_news_cycle()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É —Ä–∞–∑ –≤ –¥–µ–Ω—å
                if hasattr(self, 'monitor') and self.admin_telegram_id:
                    current_hour = datetime.now().hour
                    if current_hour == 12:  # –í –ø–æ–ª–¥–µ–Ω—å
                        stats_message = self.monitor.format_summary_message()
                        await self._send_admin_alert(stats_message)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ 2 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                logger.info("üò¥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(7200)  # 2 —á–∞—Å–∞
                
            except KeyboardInterrupt:
                logger.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                if self.admin_telegram_id:
                    await self._send_admin_alert("‚õî AI News Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                if self.admin_telegram_id:
                    await self._send_admin_alert(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
                await asyncio.sleep(300)  # –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è keep-alive
    server_thread = Thread(target=run_server, daemon=True)
    server_thread.start()
    
    try:
        bot = AINewsBot()
        await bot.start_bot()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if 'bot' in locals():
            bot.conn.close()

if __name__ == "__main__":
    asyncio.run(main())