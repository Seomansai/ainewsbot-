# Telegram AI News Bot
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è AI –Ω–æ–≤–æ—Å—Ç–µ–π

import asyncio
import sqlite3
import feedparser
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import re
import os
import json
import time
import random
from dataclasses import dataclass
from threading import Thread, Lock
from http.server import HTTPServer, SimpleHTTPRequestHandler

import aiohttp
from openai import OpenAI
from telegram import Bot
from telegram.error import TelegramError, RetryAfter, TimedOut

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ai_news_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–†–û–õ–Ø –†–ê–°–•–û–î–û–í =====
class CostTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ AI –º–æ–¥–µ–ª–∏"""
    
    def __init__(self, max_monthly_budget: float = 5.0, storage_path: str = "cost_data.json"):
        self.max_monthly_budget = max_monthly_budget
        self.storage_path = storage_path
        self.costs = self._load_costs()
        self._lock = Lock()
        
    def _load_costs(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
        try:
            if os.path.exists(self.storage_path):
                with open(self.storage_path, 'r') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö: {e}")
        
        return {
            "monthly_costs": {},
            "daily_costs": {},
            "model_usage": {}
        }
    
    def _save_costs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
        try:
            with open(self.storage_path, 'w') as f:
                json.dump(self.costs, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö: {e}")
    
    def get_current_month_key(self) -> str:
        return datetime.now().strftime("%Y-%m")
    
    def can_afford_request(self, estimated_cost: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ–º –ª–∏ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –∑–∞–ø—Ä–æ—Å"""
        with self._lock:
            month_key = self.get_current_month_key()
            current_monthly_cost = self.costs["monthly_costs"].get(month_key, 0.0)
            return (current_monthly_cost + estimated_cost) <= self.max_monthly_budget
    
    def estimate_cost(self, model: str, input_tokens: int, output_tokens: int) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        model_prices = {
            "anthropic/claude-3.5-sonnet": {"input": 3.0, "output": 15.0},
            "openai/gpt-4o": {"input": 2.5, "output": 10.0},
            "openai/gpt-3.5-turbo": {"input": 0.5, "output": 1.5},
            "meta-llama/llama-3.1-8b-instruct:free": {"input": 0.0, "output": 0.0},
            "microsoft/wizardlm-2-8x22b:free": {"input": 0.0, "output": 0.0},
        }
        
        if model not in model_prices:
            return (input_tokens * 1.0 + output_tokens * 3.0) / 1_000_000
        
        prices = model_prices[model]
        input_cost = (input_tokens * prices["input"]) / 1_000_000
        output_cost = (output_tokens * prices["output"]) / 1_000_000
        return input_cost + output_cost
    
    def record_usage(self, model: str, input_tokens: int, output_tokens: int, actual_cost: Optional[float] = None):
        """–ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if actual_cost is None:
            actual_cost = self.estimate_cost(model, input_tokens, output_tokens)
        
        with self._lock:
            month_key = self.get_current_month_key()
            day_key = datetime.now().strftime("%Y-%m-%d")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            if month_key not in self.costs["monthly_costs"]:
                self.costs["monthly_costs"][month_key] = 0.0
            self.costs["monthly_costs"][month_key] += actual_cost
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
            if day_key not in self.costs["daily_costs"]:
                self.costs["daily_costs"][day_key] = 0.0
            self.costs["daily_costs"][day_key] += actual_cost
            
            self._save_costs()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∞–ª–µ—Ä—Ç–æ–≤
            new_total = self.costs["monthly_costs"][month_key]
            
        logger.info(f"üí∞ {model}: ${actual_cost:.4f} (–º–µ—Å—è—Ü: ${new_total:.2f})")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        return {
            'cost': actual_cost,
            'monthly_total': new_total,
            'budget_percentage': (new_total / self.max_monthly_budget) * 100
        }
    
    def get_remaining_budget(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞"""
        month_key = self.get_current_month_key()
        current_spending = self.costs["monthly_costs"].get(month_key, 0.0)
        return max(0.0, self.max_monthly_budget - current_spending)
    
    def suggest_model(self, required_quality: str = "medium") -> str:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±—é–¥–∂–µ—Ç–∞"""
        remaining = self.get_remaining_budget()
        
        if remaining <= 0:
            return "meta-llama/llama-3.1-8b-instruct:free"
        
        if required_quality == "high" and remaining > 1.0:
            return "anthropic/claude-3.5-sonnet"
        elif required_quality == "medium" and remaining > 0.1:
            return "openai/gpt-3.5-turbo"
        else:
            return "meta-llama/llama-3.1-8b-instruct:free"
    
    def check_budget_alerts(self, usage_info: dict) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ –±—é–¥–∂–µ—Ç–µ"""
        percentage = usage_info['budget_percentage']
        monthly_total = usage_info['monthly_total']
        
        # –ê–ª–µ—Ä—Ç –ø—Ä–∏ 75% –±—é–¥–∂–µ—Ç–∞
        if 75 <= percentage < 90:
            return f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±—é–¥–∂–µ—Ç–µ</b>\n\n" \
                   f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${monthly_total:.2f} –∏–∑ ${self.max_monthly_budget}\n" \
                   f"–ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n" \
                   f"–û—Å—Ç–∞—Ç–æ–∫: ${self.max_monthly_budget - monthly_total:.2f}"
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –ø—Ä–∏ 90% –±—é–¥–∂–µ—Ç–∞
        elif 90 <= percentage < 100:
            return f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!</b>\n\n" \
                   f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${monthly_total:.2f} –∏–∑ ${self.max_monthly_budget}\n" \
                   f"–ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%\n" \
                   f"–û—Å—Ç–∞—Ç–æ–∫: ${self.max_monthly_budget - monthly_total:.2f}\n" \
                   f"‚ö° –°–∫–æ—Ä–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å!"
        
        # –ê–ª–µ—Ä—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        elif percentage >= 100:
            return f"üõë <b>–ë–Æ–î–ñ–ï–¢ –ü–†–ï–í–´–®–ï–ù!</b>\n\n" \
                   f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${monthly_total:.2f} –∏–∑ ${self.max_monthly_budget}\n" \
                   f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${monthly_total - self.max_monthly_budget:.2f}\n" \
                   f"üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å"
        
        return None

# ===== RETRY –î–ï–ö–û–†–ê–¢–û–† =====
def retry_with_backoff(max_attempts: int = 3, base_delay: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry —Å exponential backoff"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            last_exception = None
            
            for attempt in range(max_attempts):
                try:
                    return await func(*args, **kwargs)
                except (TelegramError, aiohttp.ClientError, Exception) as e:
                    last_exception = e
                    
                    if attempt == max_attempts - 1:
                        break
                    
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å jitter
                    delay = base_delay * (2 ** attempt) + random.uniform(0, 1)
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay:.1f}—Å: {e}")
                    await asyncio.sleep(delay)
            
            logger.error(f"–í—Å–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã: {last_exception}")
            raise last_exception
        
        return wrapper
    return decorator

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive
def run_server():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è keep-alive"""
    port = int(os.environ.get('PORT', 8000))
    
    class KeepAliveHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            self.wfile.write(b'AI News Bot is running!')
    
    server = HTTPServer(('', port), KeepAliveHandler)
    print(f"Keep-alive server running on port {port}")
    server.serve_forever()

@dataclass
class NewsItem:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏"""
    title: str
    description: str
    link: str
    published: datetime
    source: str
    translated_title: str = ""
    translated_description: str = ""

class AINewsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è AI –Ω–æ–≤–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.channel_id = os.getenv('TELEGRAM_CHANNEL_ID')
        self.openrouter_api_key = os.getenv('OPENROUTER_API_KEY')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.ai_model = os.getenv('AI_MODEL', 'anthropic/claude-3.5-sonnet')
        self.max_monthly_cost = float(os.getenv('MAX_MONTHLY_COST', '5.0'))
        self.max_news_per_cycle = int(os.getenv('MAX_NEWS_PER_CYCLE', '10'))
        self.admin_telegram_id = os.getenv('ADMIN_TELEGRAM_ID')
        
        # –£–º–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_path_env = os.getenv('DATABASE_PATH', 'ai_news.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –Ω–∞ –æ–±–ª–∞—á–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        if os.path.exists('/opt/render') or os.getenv('RENDER'):
            # –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
            self.db_path = '/opt/render/project/ai_news.db'
        elif os.path.exists('/app'):  # Railway/Heroku
            self.db_path = '/app/ai_news.db'
        else:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            self.db_path = db_path_env
        
        logger.info(f"üìÅ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        if not self.bot_token or not self.channel_id:
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID")
        
        self.bot = Bot(token=self.bot_token)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        self.cost_tracker = CostTracker(self.max_monthly_cost)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenRouter –∫–ª–∏–µ–Ω—Ç–∞
        self.client = None
        if self.openrouter_api_key:
            self.client = OpenAI(
                api_key=self.openrouter_api_key,
                base_url="https://openrouter.ai/api/v1"
            )
            logger.info("‚úÖ Claude 3.5 Sonnet –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è RSS –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.info(f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${self.cost_tracker.get_remaining_budget():.2f}")
        else:
            logger.warning("‚ö†Ô∏è OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # RSS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ AI –Ω–æ–≤–æ—Å—Ç–µ–π (–¢–û–ü-20 —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö)
        self.rss_sources = {
            # ===== –¢–û–ü-20 –†–£–°–°–ö–û–Ø–ó–´–ß–ù–´–• –ò–°–¢–û–ß–ù–ò–ö–û–í AI –ò –¢–ï–•–ù–û–õ–û–ì–ò–ô =====
            
            # üèÜ –•–∞–±—Ä - –≥–ª–∞–≤–Ω—ã–µ AI —Ö–∞–±—ã
            '–•–∞–±—Ä AI': 'https://habr.com/ru/rss/hub/artificial_intelligence/',
            '–•–∞–±—Ä ML': 'https://habr.com/ru/rss/hub/machine_learning/',
            '–•–∞–±—Ä DataScience': 'https://habr.com/ru/rss/hub/data_mining/',
            '–•–∞–±—Ä Neural Networks': 'https://habr.com/ru/rss/hub/neural_networks/',
            '–•–∞–±—Ä Python': 'https://habr.com/ru/rss/hub/python/',
            
            # üî• –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ tech-–∏–∑–¥–∞–Ω–∏—è
            'Tproger': 'https://tproger.ru/feed/',
            'VC.ru Tech': 'https://vc.ru/feed',
            'DTF Tech': 'https://dtf.ru/rss/all',
            
            # üì∞ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
            'CNews': 'https://www.cnews.ru/inc/rss/news.xml',
            '3DNews': 'https://3dnews.ru/news/rss/',
            'Digit.ru': 'https://digit.ru/rss/',
            'Hi-Tech Mail.ru': 'https://hi-tech.mail.ru/rss/',
            
            # üõ°Ô∏è –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Ö–∞–∫–µ—Ä—Å—Ç–≤–æ
            'Xakep.ru': 'https://xakep.ru/feed/',
            'SecurityLab': 'https://www.securitylab.ru/rss.php',
            
            # üéÆ –ò–≥—Ä–æ–≤–∞—è –∏–Ω–¥—É—Å—Ç—Ä–∏—è –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            'StopGame Tech': 'https://stopgame.ru/rss/news.xml',
            '–ò–≥—Ä–æ–º–∞–Ω–∏—è Tech': 'https://www.igromania.ru/rss/news.xml',
            
            # üíº –°—Ç–∞—Ä—Ç–∞–ø—ã –∏ –±–∏–∑–Ω–µ—Å
            'RB.ru Tech': 'https://rb.ru/feeds/all/',
            'Forbes Russia Tech': 'https://www.forbes.ru/rss',
            
            # üî¨ –ù–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
            'N+1 Tech': 'https://nplus1.ru/rss',
            '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞': 'https://www.popmech.ru/rss/',
        }
        
        # –°—Ç—Ä–æ–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è AI (—Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ)
        self.ai_keywords = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ AI —Ç–µ—Ä–º–∏–Ω—ã
            'artificial intelligence', 'machine learning', 'neural network', 'deep learning',
            'chatgpt', 'gpt', 'openai', 'claude', 'anthropic', 'gemini', 'bard',
            'llm', 'large language model', 'generative ai', 'transformer',
            'computer vision', 'nlp', 'natural language processing',
            'tensorflow', 'pytorch', 'hugging face', 'algorithm',
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ AI —Ç–µ—Ä–º–∏–Ω—ã  
            'robotics', 'automation', 'data science', 'big data',
            'cybersecurity ai', 'ai security', 'ai ethics',
            
            # ===== –†–ê–°–®–ò–†–ï–ù–ù–´–ï –†–£–°–°–ö–ò–ï AI –¢–ï–†–ú–ò–ù–´ =====
            # –û—Å–Ω–æ–≤–Ω—ã–µ
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å',
            '–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '—á–∞—Ç–≥–ø—Ç', 'gpt', '–∫–ª–æ–¥', '–≥–µ–º–∏–Ω–∏',
            '—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å', '–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–∏', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä',
            '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
            
            # –†–æ—Å—Å–∏–π—Å–∫–∏–µ AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            'yandex gpt', '—è–Ω–¥–µ–∫—Å –≥–ø—Ç', 'gigachat', '–≥–∏–≥–∞—á–∞—Ç',
            'kandinsky', '–∫–∞–Ω–¥–∏–Ω—Å–∫–∏–π', 'rubert', 'rudalcore',
            '—Å–±–µ—Ä ai', '—Å–±–µ—Äapi', 'salute ai',
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ
            '–∞–ª–≥–æ—Ä–∏—Ç–º', '—Ä–æ–±–æ—Ç–∏–∫–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö', '–±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ',
            '–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–∏', '—ç—Ç–∏–∫–∞ –∏–∏', 'python', 'tensorflow', 'pytorch',
            '–º–∞—à–∏–Ω–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', '—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏', '—Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏',
            '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '–ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
            
            # –ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã
            '—Å—Ç–∞—Ä—Ç–∞–ø ai', '–∏–∏ —Å—Ç–∞—Ä—Ç–∞–ø', 'tech —Å—Ç–∞—Ä—Ç–∞–ø', '—Ñ–∏–Ω—Ç–µ—Ö',
            'edtech', 'healthtech', 'regtech', 'insurtech',
            '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è', '–¥–∏–¥–∂–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è', '—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è',
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            '–±–ª–æ–∫—á–µ–π–Ω', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 'nft', '–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è', 'vr', 'ar',
            '–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è', 'edge computing', 'iot', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–µ—â–µ–π',
            '5g', '6g', '–æ–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è', '–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã',
            
            # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
            '—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥', '–±—ç–∫–µ–Ω–¥', 'fullstack', 'devops', 'mlops',
            'api', 'sdk', 'framework', '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', 'opensource',
            'github', 'gitlab', 'docker', 'kubernetes'
        ]
        
        # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ (–Ω–æ–≤–æ—Å—Ç–∏ —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –ù–ï –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ AI)
        self.exclude_keywords = [
            # –û–±—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            '–ø–æ–ª–∏—Ç–∏–∫–∞', '–≤—ã–±–æ—Ä—ã', '–≤–æ–π–Ω–∞', '—Å–∞–Ω–∫—Ü–∏–∏', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–Ω–µ—Ñ—Ç—å', '–≥–∞–∑',
            '—Å–ø–æ—Ä—Ç', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π', '–∏–≥—Ä—ã', '–∫–∏–Ω–æ', '–º—É–∑—ã–∫–∞', '–∞—Ä—Ç–∏—Å—Ç',
            'politics', 'election', 'war', 'sanctions', 'economy', 'oil', 'gas',
            'sport', 'football', 'hockey', 'movie', 'music', 'artist',
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ, –Ω–æ –Ω–µ AI
            'iphone', 'samsung', 'apple', 'microsoft office', 'windows', '–±–ª–æ–∫–Ω–æ—Ç',
            'xbox', 'playstation', 'steam', 'twitch', 'discord'
        ]
        
        # Thread-safe –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self._db_lock = Lock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        logger.info(f"üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        db_dir = os.path.dirname(self.db_path)
        if db_dir and not os.path.exists(db_dir):
            try:
                os.makedirs(db_dir, exist_ok=True)
                logger.info(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {db_dir}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {db_dir}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        try:
            test_file = os.path.join(db_dir if db_dir else '.', 'test_write.tmp')
            with open(test_file, 'w') as f:
                f.write('test')
            os.remove(test_file)
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ë–î –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∑–∞–ø–∏—Å–∏: {e}")
        
        with self._db_lock:
            try:
                self.conn = sqlite3.connect(self.db_path, check_same_thread=False)
                
                # –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                self.conn.execute("""
                    CREATE TABLE IF NOT EXISTS published_news (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        link TEXT UNIQUE NOT NULL,
                        title TEXT,
                        source TEXT,
                        published_date DATETIME,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        status TEXT DEFAULT 'reserved'
                    )
                """)
                
                # –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                cursor = self.conn.execute("PRAGMA table_info(published_news)")
                columns = [col[1] for col in cursor.fetchall()]
                
                if 'status' not in columns:
                    logger.info("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'status'")
                    self.conn.execute("ALTER TABLE published_news ADD COLUMN status TEXT DEFAULT 'published'")
                    # –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
                    self.conn.execute("UPDATE published_news SET status = 'published' WHERE status IS NULL")
                    self.conn.commit()
                    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                self.conn.execute("CREATE INDEX IF NOT EXISTS idx_link ON published_news(link)")
                self.conn.execute("CREATE INDEX IF NOT EXISTS idx_status ON published_news(status)")
                self.conn.execute("CREATE INDEX IF NOT EXISTS idx_created_at ON published_news(created_at)")
                
                self.conn.commit()
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                count = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
                published_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'").fetchone()[0]
                reserved_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'reserved'").fetchone()[0]
                
                logger.info(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞. –í—Å–µ–≥–æ: {count} | –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count} | –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {reserved_count}")
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
                old_reserved = datetime.now() - timedelta(hours=1)
                deleted = self.conn.execute(
                    "DELETE FROM published_news WHERE status = 'reserved' AND created_at < ?", 
                    (old_reserved,)
                ).rowcount
                
                if deleted > 0:
                    self.conn.commit()
                    logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
                raise
    
    @retry_with_backoff(max_attempts=3, base_delay=2.0)
    async def fetch_rss_feed(self, url: str) -> List[Dict]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ RSS —Ñ–∏–¥–∞ —Å retry"""
        try:
            timeout = aiohttp.ClientTimeout(total=30)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã 2xx (200, 201, 202, etc.)
                    if not (200 <= response.status < 300):
                        raise aiohttp.ClientError(f"HTTP {response.status}")
                    
                    content = await response.text()
                    feed = feedparser.parse(content)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å RSS —Ñ–∏–¥–∞
                    if hasattr(feed, 'entries') and len(feed.entries) > 0:
                        logger.info(f"‚úÖ RSS —Ñ–∏–¥ –ø–æ–ª—É—á–µ–Ω: {len(feed.entries)} –∑–∞–ø–∏—Å–µ–π (HTTP {response.status})")
                        return feed.entries
                    else:
                        logger.warning(f"‚ö†Ô∏è RSS —Ñ–∏–¥ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {url}")
                        return []
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ RSS —Ñ–∏–¥–∞ {url}: {e}")
            raise
    
    def is_ai_related(self, title: str, description: str) -> bool:
        """–°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –∫ AI"""
        text = (title + " " + description).lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞
        for exclude_word in self.exclude_keywords:
            if exclude_word.lower() in text:
                return False
        
        # –ó–∞—Ç–µ–º –∏—â–µ–º AI –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        ai_matches = 0
        for keyword in self.ai_keywords:
            if keyword.lower() in text:
                ai_matches += 1
                
        # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è AI
        return ai_matches >= 1
    
    def is_already_published(self, link: str, title: str = "") -> bool:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Ö–æ–∂–µ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        with self._db_lock:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            cursor = self.conn.execute(
                "SELECT status FROM published_news WHERE link = ?", (link,)
            )
            result = cursor.fetchone()
            if result is not None:
                status = result[0]
                logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å: {status}): {link[:50]}...")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–æ—Ö–æ–∂–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if title and len(title) > 20:
                # –£–ø—Ä–æ—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                clean_title = self._clean_title_for_comparison(title)
                
                cursor = self.conn.execute(
                    "SELECT title, status FROM published_news WHERE created_at > datetime('now', '-7 days')"
                )
                existing_titles = cursor.fetchall()
                
                for (existing_title, status) in existing_titles:
                    if existing_title:
                        clean_existing = self._clean_title_for_comparison(existing_title)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å (>80% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                        if self._calculate_similarity(clean_title, clean_existing) > 0.8:
                            logger.info(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É (—Å—Ç–∞—Ç—É—Å: {status}): {title[:50]}... ‚âà {existing_title[:50]}...")
                            return True
            
            logger.info(f"‚úÖ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {link[:50]}...")
            return False
    
    def _clean_title_for_comparison(self, title: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        import re
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        cleaned = re.sub(r'[^\w\s]', '', title.lower())
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = ' '.join(cleaned.split())
        return cleaned
    
    def _calculate_similarity(self, text1: str, text2: str) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)"""
        if not text1 or not text2:
            return 0.0
        
        words1 = set(text1.split())
        words2 = set(text2.split())
        
        if not words1 or not words2:
            return 0.0
        
        intersection = words1.intersection(words2)
        union = words1.union(words2)
        
        return len(intersection) / len(union) if union else 0.0
    
    def mark_as_published(self, news: NewsItem):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ 'published'"""
        with self._db_lock:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å reserved –Ω–∞ published
                cursor = self.conn.execute(
                    "UPDATE published_news SET status = 'published' WHERE link = ?",
                    (news.link,)
                )
                
                if cursor.rowcount == 0:
                    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
                    self.conn.execute(
                        "INSERT OR IGNORE INTO published_news (link, title, source, published_date, status) VALUES (?, ?, ?, ?, 'published')",
                        (news.link, news.title, news.source, news.published)
                    )
                
                self.conn.commit()
                logger.info(f"üìù –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'published': {news.title[:50]}...")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}")
    
    def reserve_news_for_processing(self, news_list: List[NewsItem]) -> List[NewsItem]:
        """–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
        reserved_news = []
        
        with self._db_lock:
            for news in news_list:
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å
                    cursor = self.conn.execute(
                        "INSERT OR IGNORE INTO published_news (link, title, source, published_date, status) VALUES (?, ?, ?, ?, 'reserved')",
                        (news.link, news.title, news.source, news.published)
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–π
                    if cursor.rowcount > 0:
                        reserved_news.append(news)
                        logger.info(f"üîí –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {news.title[:50]}...")
                    else:
                        logger.info(f"üîÑ –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {news.title[:50]}...")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            
            self.conn.commit()
        
        logger.info(f"‚úÖ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ {len(reserved_news)} –∏–∑ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        return reserved_news
    
    def detect_language(self, text: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞ (ru –∏–ª–∏ en)"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        cyrillic_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è')
        latin_chars = sum(1 for char in text if 'a' <= char.lower() <= 'z')
        
        if cyrillic_chars > latin_chars:
            return 'ru'
        else:
            return 'en'
    
    def is_russian_source(self, source_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º"""
        russian_sources = [
            # –•–∞–±—Ä —Ö–∞–±—ã
            '–•–∞–±—Ä AI', '–•–∞–±—Ä ML', '–•–∞–±—Ä DataScience', '–•–∞–±—Ä Neural Networks', '–•–∞–±—Ä Python',
            # Tech –∏–∑–¥–∞–Ω–∏—è
            'Tproger', 'VC.ru Tech', 'DTF Tech',
            # –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã
            'CNews', '3DNews', 'Digit.ru', 'Hi-Tech Mail.ru',
            # –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            'Xakep.ru', 'SecurityLab',
            # –ò–≥—Ä—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            'StopGame Tech', '–ò–≥—Ä–æ–º–∞–Ω–∏—è Tech',
            # –ë–∏–∑–Ω–µ—Å
            'RB.ru Tech', 'Forbes Russia Tech',
            # –ù–∞—É—á–ø–æ–ø
            'N+1 Tech', '–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –ú–µ—Ö–∞–Ω–∏–∫–∞'
        ]
        return source_name in russian_sources
    
    async def translate_news(self, news_list: List[NewsItem]) -> List[NewsItem]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ RSS —Å Claude - –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥/–ø–µ—Ä–µ—Å–∫–∞–∑"""
        for news in news_list:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
                language = self.detect_language(news.title + " " + news.description)
                is_russian = self.is_russian_source(news.source)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                lang_emoji = "üá∑üá∫" if language == 'ru' or is_russian else "üá∫üá∏"
                logger.info(f"{lang_emoji} Claude –æ–±—Ä–∞–±–æ—Ç–∫–∞: {news.title[:50]}...")
                
                # –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                news.translated_title = self.clean_html(news.title)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Claude –∏–ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                if self.client:
                    # –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ —á–µ—Ä–µ–∑ Claude
                    full_text = f"{news.title}. {news.description}"
                    detected_lang = 'ru' if (language == 'ru' or is_russian) else 'en'
                    news.translated_description = await self.process_with_claude(full_text, detected_lang)
                else:
                    # Fallback - –ø—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML
                    news.translated_description = self.clean_html(news.description)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                news.translated_title = self.clean_html(news.title)
                news.translated_description = self.clean_html(news.description)
        
        return news_list
    
    async def process_with_claude(self, text: str, language: str = "en") -> str:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Claude"""
        try:
            if len(text) > 2000:
                text = text[:2000] + "..."
            
            # –£–º–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±—é–¥–∂–µ—Ç–∞
            model = self.ai_model
            estimated_input_tokens = len(text) // 4
            estimated_output_tokens = estimated_input_tokens // 3
            
            estimated_cost = self.cost_tracker.estimate_cost(
                model, estimated_input_tokens, estimated_output_tokens
            )
            
            if not self.cost_tracker.can_afford_request(estimated_cost):
                logger.warning("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –±—é–¥–∂–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å")
                model = "meta-llama/llama-3.1-8b-instruct:free"
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è RSS
            if language == 'ru':
                system_prompt = """–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSS –Ω–æ–≤–æ—Å—Ç–µ–π. 

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, —á–∏—Ç–∞–µ–º—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Ä—É—Å—Å–∫–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –æ–± AI/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö:
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º
- –°–æ—Ö—Ä–∞–Ω—è–π –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–æ–º–ø–∞–Ω–∏–∏, —Ü–∏—Ñ—Ä—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
- –£–±–∏—Ä–∞–π HTML —Ç–µ–≥–∏ –∏ —Ä–µ–∫–ª–∞–º—É
- –ü—Ä–æ—Å—Ç–æ–π –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫"""
                
                user_content = f"–û–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É RSS –Ω–æ–≤–æ—Å—Ç—å:\n\n{text}"
            else:
                system_prompt = """–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ RSS –Ω–æ–≤–æ—Å—Ç–µ–π.

–ü–µ—Ä–µ–≤–µ–¥–∏ –∞–Ω–≥–ª–∏–π—Å–∫—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑:
- 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º  
- –°–æ—Ö—Ä–∞–Ω—è–π –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∫–æ–º–ø–∞–Ω–∏–∏, —Ü–∏—Ñ—Ä—ã, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)
- –£–±–∏—Ä–∞–π HTML —Ç–µ–≥–∏ –∏ —Ä–µ–∫–ª–∞–º—É
- –ü—Ä–æ—Å—Ç–æ–π –ø–æ–Ω—è—Ç–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
                
                user_content = f"–ü–µ—Ä–µ–≤–µ–¥–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π —ç—Ç—É RSS –Ω–æ–≤–æ—Å—Ç—å:\n\n{text}"
            
            response = self.client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_content}
                ],
                temperature=0.2,
                max_tokens=600
            )
            
            # –ó–∞–ø–∏—Å—å —Ä–∞—Å—Ö–æ–¥–æ–≤
            if hasattr(response, 'usage') and response.usage:
                usage_info = self.cost_tracker.record_usage(
                    model, 
                    response.usage.prompt_tokens,
                    response.usage.completion_tokens
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                if usage_info and self.admin_telegram_id:
                    alert_message = self.cost_tracker.check_budget_alerts(usage_info)
                    if alert_message:
                        await self._send_admin_alert(alert_message)
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Claude –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self.clean_html(text)  # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –æ—á–∏—Å—Ç–∫—É
    
    def clean_html(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        import re
        import html
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
        text = html.unescape(text)
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (Telegram –ª–∏–º–∏—Ç)
        if len(text) > 800:
            text = text[:800] + "..."
        
        return text
    
    def format_message(self, news: NewsItem) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RSS —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram"""
        import html
        
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML —Ä–µ–∂–∏–º–∞ Telegram
        title = html.escape(news.translated_title) if news.translated_title else html.escape(news.title)
        description = html.escape(news.translated_description) if news.translated_description else html.escape(news.description)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        is_russian = self.is_russian_source(news.source)
        source_flag = "üá∑üá∫" if is_russian else "üåç"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"ü§ñ <b>AI –ù–æ–≤–æ—Å—Ç–∏</b>\n\n"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if title:
            message += f"<b>{title}</b>\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if description and len(description.strip()) > 0:
            message += f"{description}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        message += f"{source_flag} <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {news.source}\n"
        message += f"üîó <a href='{news.link}'>–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
        
        return message
    
    @retry_with_backoff(max_attempts=3, base_delay=2.0)
    async def publish_news(self, news_list: List[NewsItem]):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –∫–∞–Ω–∞–ª —Å retry"""
        published_count = 0
        
        for news in news_list[:self.max_news_per_cycle]:
            try:
                message = self.format_message(news)
                
                await self._send_telegram_message(message)
                
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
                self.mark_as_published(news)
                published_count += 1
                
                logger.info(f"üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {news.title[:50]}...")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (Telegram rate limit)
                await asyncio.sleep(3)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ {news.title[:50]}: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if self.admin_telegram_id:
                    await self._send_admin_alert(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)[:100]}")
        
        return published_count
    
    @retry_with_backoff(max_attempts=5, base_delay=1.0)
    async def _send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits"""
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=False
            )
        except RetryAfter as e:
            logger.warning(f"Rate limit, –æ–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after)
            raise  # Retry decorator –ø–æ–≤—Ç–æ—Ä–∏—Ç
        except TimedOut:
            logger.warning("Telegram timeout, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞")
            raise  # Retry decorator –ø–æ–≤—Ç–æ—Ä–∏—Ç
        except TelegramError as e:
            logger.error(f"Telegram error: {e}")
            raise
    
    async def _send_admin_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        if not self.admin_telegram_id:
            return
            
        try:
            alert_message = f"ü§ñ <b>AI News Bot Alert</b>\n\n{message}\n\n<i>{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</i>"
            await self.bot.send_message(
                chat_id=self.admin_telegram_id,
                text=alert_message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    def cleanup_old_records(self):
        """–£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self._db_lock:
            # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cutoff_date = datetime.now() - timedelta(days=30)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
            total_before = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            cursor = self.conn.execute(
                "DELETE FROM published_news WHERE created_at < ?",
                (cutoff_date,)
            )
            deleted_count = cursor.rowcount
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.conn.execute("VACUUM")
            self.conn.commit()
            
            total_after = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            
            if deleted_count > 0:
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ë–î: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π. –û—Å—Ç–∞–ª–æ—Å—å: {total_after}")
            else:
                logger.info(f"üìä –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞: {total_after} –∑–∞–ø–∏—Å–µ–π, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    def get_duplicate_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"""
        with self._db_lock:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now() - timedelta(days=7)
            
            cursor = self.conn.execute(
                "SELECT COUNT(*) FROM published_news WHERE created_at > ?",
                (week_ago,)
            )
            week_count = cursor.fetchone()[0]
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            total_count = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            
            return {
                'total_saved': total_count,
                'last_week': week_count,
                'estimated_duplicates_blocked': max(0, week_count * 2)  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            }
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        with self._db_lock:
            cursor = self.conn.execute(
                "SELECT COUNT(*) FROM published_news WHERE status = 'published' AND created_at > ?",
                (datetime.now() - timedelta(hours=24),)
            )
            last_24h = cursor.fetchone()[0]
            
            cursor = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'")
            total = cursor.fetchone()[0]
        
        remaining_budget = self.cost_tracker.get_remaining_budget() if hasattr(self, 'cost_tracker') else 0
        
        return {
            'total_published': total,
            'last_24h': last_24h,
            'remaining_budget': remaining_budget,
            'current_model': getattr(self, 'ai_model', 'claude-3.5-sonnet'),
            'status': 'active'
        }
    
    async def run_news_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        cycle_start_time = time.time()
        
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            stats = self.get_statistics()
            logger.info(f"üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞. –ë–î: {stats['total_published']} –Ω–æ–≤–æ—Å—Ç–µ–π, –ë—é–¥–∂–µ—Ç: ${stats['remaining_budget']:.2f}")
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
            raw_news = await self.parse_news_sources()
            logger.info(f"üì∞ –ù–∞–π–¥–µ–Ω–æ {len(raw_news)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            if not raw_news:
                logger.info("‚ùå –ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ù–û–í–û–ï: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            logger.info("üîí –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            reserved_news = self.reserve_news_for_processing(raw_news)
            
            if not reserved_news:
                logger.info("‚ùå –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã")
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Claude (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            logger.info(f"ü§ñ Claude –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {len(reserved_news)} RSS –Ω–æ–≤–æ—Å—Ç–µ–π...")
            translated_news = await self.translate_news(reserved_news)
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
            logger.info(f"üì¢ –ü—É–±–ª–∏–∫—É–µ–º –¥–æ {self.max_news_per_cycle} –Ω–æ–≤–æ—Å—Ç–µ–π...")
            published_count = await self.publish_news(translated_news)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cycle_duration = time.time() - cycle_start_time
            new_stats = self.get_statistics()
            
            logger.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.1f}—Å. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É
            if self.admin_telegram_id and published_count > 0:
                await self._send_admin_alert(
                    f"üìä Claude RSS —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                    f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(raw_news)}\n"
                    f"‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(reserved_news)}\n"
                    f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_count}\n"
                    f"‚Ä¢ –í—Ä–µ–º—è: {cycle_duration:.1f}—Å\n"
                    f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${new_stats['remaining_budget']:.2f}"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É
            if self.admin_telegram_id:
                await self._send_admin_alert(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            
            raise
    
    def database_diagnostics(self) -> Dict:
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self._db_lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
            db_exists = os.path.exists(self.db_path)
            db_size = os.path.getsize(self.db_path) if db_exists else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            total_records = self.conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
            published_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'").fetchone()[0]
            reserved_count = self.conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'reserved'").fetchone()[0]
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor = self.conn.execute(
                "SELECT link, title, status, created_at FROM published_news ORDER BY created_at DESC LIMIT 5"
            )
            recent_records = cursor.fetchall()
            
            # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            day_ago = datetime.now() - timedelta(hours=24)
            cursor = self.conn.execute(
                "SELECT COUNT(*) FROM published_news WHERE created_at > ?", (day_ago,)
            )
            recent_count = cursor.fetchone()[0]
            
            return {
                'db_path': self.db_path,
                'db_exists': db_exists,
                'db_size_bytes': db_size,
                'total_records': total_records,
                'published_count': published_count,
                'reserved_count': reserved_count,
                'recent_24h': recent_count,
                'recent_records': recent_records
            }

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI News Bot...")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        db_diagnostics = self.database_diagnostics()
        logger.info(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ë–î:")
        logger.info(f"  ‚Ä¢ –ü—É—Ç—å: {db_diagnostics['db_path']}")
        logger.info(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {db_diagnostics['db_size_bytes']} –±–∞–π—Ç")
        logger.info(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {db_diagnostics['total_records']}")
        logger.info(f"  ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_diagnostics['published_count']}")
        logger.info(f"  ‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {db_diagnostics['reserved_count']}")
        logger.info(f"  ‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {db_diagnostics['recent_24h']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            from bot_monitoring import add_monitoring_to_bot
            add_monitoring_to_bot(self)
            logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –∞–¥–º–∏–Ω—É —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        if self.admin_telegram_id:
            startup_message = (
                f"üöÄ AI News Bot –∑–∞–ø—É—â–µ–Ω!\n\n"
                f"<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>\n"
                f"‚Ä¢ –†–µ–∂–∏–º: Claude RSS –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
                f"‚Ä¢ –ú–æ–¥–µ–ª—å: {self.ai_model}\n"
                f"‚Ä¢ –ë—é–¥–∂–µ—Ç: ${self.max_monthly_cost}\n"
                f"‚Ä¢ –ú–∞–∫—Å –Ω–æ–≤–æ—Å—Ç–µ–π: {self.max_news_per_cycle}\n\n"
                f"<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
                f"‚Ä¢ –ü—É—Ç—å: {db_diagnostics['db_path']}\n"
                f"‚Ä¢ –†–∞–∑–º–µ—Ä: {db_diagnostics['db_size_bytes']} –±–∞–π—Ç\n"
                f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_diagnostics['published_count']}\n"
                f"‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {db_diagnostics['reserved_count']}\n"
                f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {db_diagnostics['recent_24h']}"
            )
            await self._send_admin_alert(startup_message)
        
        while True:
            try:
                await self.run_news_cycle()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—É —Ä–∞–∑ –≤ –¥–µ–Ω—å
                if hasattr(self, 'monitor') and self.admin_telegram_id:
                    current_hour = datetime.now().hour
                    if current_hour == 12:  # –í –ø–æ–ª–¥–µ–Ω—å
                        stats_message = self.monitor.format_summary_message()
                        await self._send_admin_alert(stats_message)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ 2 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                logger.info("üò¥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(7200)  # 2 —á–∞—Å–∞
                
            except KeyboardInterrupt:
                logger.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                if self.admin_telegram_id:
                    await self._send_admin_alert("‚õî AI News Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                if self.admin_telegram_id:
                    await self._send_admin_alert(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
                await asyncio.sleep(300)  # –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def parse_news_sources(self) -> List[NewsItem]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        all_news = []
        successful_sources = 0
        failed_sources = []
        
        for source_name, rss_url in self.rss_sources.items():
            try:
                logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_name}")
                entries = await self.fetch_rss_feed(rss_url)
                
                if not entries:
                    logger.warning(f"‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    failed_sources.append(source_name)
                    continue
                
                source_news_count = 0
                max_news_per_source = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –Ω–æ–≤–æ—Å—Ç–µ–π —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                
                for entry in entries:
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    if source_news_count >= max_news_per_source:
                        logger.info(f"üîí –õ–∏–º–∏—Ç –¥–ª—è {source_name} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({max_news_per_source} –Ω–æ–≤–æ—Å—Ç–µ–π)")
                        break
                        
                    try:
                        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        published = datetime.now()
                        if hasattr(entry, 'published_parsed') and entry.published_parsed:
                            published = datetime(*entry.published_parsed[:6])
                        
                        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
                        news = NewsItem(
                            title=entry.get('title', ''),
                            description=entry.get('summary', ''),
                            link=entry.get('link', ''),
                            published=published,
                            source=source_name
                        )
                        
                        # –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ AI —Ç–µ–º–∞—Ç–∏–∫–µ
                        if self.is_ai_related(news.title, news.description):
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
                            if not self.is_already_published(news.link, news.title):
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
                                if published > datetime.now() - timedelta(hours=24):
                                    all_news.append(news)
                                    source_news_count += 1
                                    logger.info(f"‚úÖ AI –Ω–æ–≤–æ—Å—Ç—å #{source_news_count}: {news.title[:50]}...")
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {source_name}: {e}")
                
                if source_news_count > 0:
                    logger.info(f"‚úÖ {source_name}: –Ω–∞–π–¥–µ–Ω–æ {source_news_count} AI –Ω–æ–≤–æ—Å—Ç–µ–π")
                    successful_sources += 1
                else:
                    logger.info(f"‚ÑπÔ∏è {source_name}: AI –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    successful_sources += 1  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_name}: {e}")
                failed_sources.append(source_name)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        logger.info(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {successful_sources}/{len(self.rss_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        if failed_sources:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(failed_sources)}")
        
        return all_news

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è keep-alive
    server_thread = Thread(target=run_server, daemon=True)
    server_thread.start()
    
    try:
        bot = AINewsBot()
        await bot.start_bot()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        if 'bot' in locals():
            bot.conn.close()

if __name__ == "__main__":
    asyncio.run(main())