# –¢–µ—Å—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ AI News Bot
import asyncio
import feedparser
import aiohttp
from datetime import datetime

# –†–æ—Å—Å–∏–π—Å–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
RUSSIAN_SOURCES = {
    '–•–∞–±—Ä AI': 'https://habr.com/ru/rss/hub/artificial_intelligence/',
    '–•–∞–±—Ä ML': 'https://habr.com/ru/rss/hub/machine_learning/',
    'VC.ru –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'https://vc.ru/rss/tech',
    '–†–ë–ö –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'https://rssexport.rbc.ru/rbcnews/news/20/full.rss',
    'CNews': 'https://www.cnews.ru/inc/rss/news.xml',
    '3DNews': 'https://3dnews.ru/news/rss/',
}

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ò–ò –Ω–∞ —Ä—É—Å—Å–∫–æ–º
AI_KEYWORDS_RU = [
    '–∏–∏', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å',
    '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '—á–∞—Ç–≥–ø—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–Ω–ª–ø', 
    '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', '—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å', '–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–∏',
    'openai', '–Ω–µ–π—Ä–æ–Ω–∫–∞', 'ml', 'dl', 'data science', '–¥–∞—Ç–∞—Å–∞–π–µ–Ω—Å',
    'yandex gpt', '—è–Ω–¥–µ–∫—Å –≥–ø—Ç', '—Å–±–µ—Ä', 'gigachat', '–≥–∏–≥–∞—á–∞—Ç'
]

def detect_language(text):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    cyrillic_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è')
    latin_chars = sum(1 for char in text if 'a' <= char.lower() <= 'z')
    return 'ru' if cyrillic_chars > latin_chars else 'en'

def is_ai_related_ru(title, description):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –ò–ò –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    text = (title + " " + description).lower()
    return any(keyword in text for keyword in AI_KEYWORDS_RU)

async def fetch_rss_feed(url):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ RSS —Ñ–∏–¥–∞"""
    try:
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    content = await response.text()
                    feed = feedparser.parse(content)
                    return feed.entries
                else:
                    print(f"‚ùå HTTP {response.status} –¥–ª—è {url}")
                    return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {url}: {e}")
        return []

async def test_russian_sources():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    print("üá∑üá∫ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ AI –Ω–æ–≤–æ—Å—Ç–µ–π\n")
    
    total_news = 0
    ai_news = 0
    
    for source_name, rss_url in RUSSIAN_SOURCES.items():
        print(f"üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {source_name}")
        print(f"   URL: {rss_url}")
        
        entries = await fetch_rss_feed(rss_url)
        
        if not entries:
            print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
            continue
            
        print(f"   üì∞ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(entries)}")
        
        relevant_entries = []
        for entry in entries[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
            title = entry.get('title', '')
            description = entry.get('summary', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
            language = detect_language(title + " " + description)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –ò–ò
            if is_ai_related_ru(title, description):
                relevant_entries.append({
                    'title': title,
                    'description': description[:100] + "...",
                    'language': language,
                    'link': entry.get('link', '')
                })
        
        total_news += len(entries)
        ai_news += len(relevant_entries)
        
        print(f"   ü§ñ AI –Ω–æ–≤–æ—Å—Ç–µ–π: {len(relevant_entries)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        for i, news in enumerate(relevant_entries[:2], 1):
            print(f"   {i}. {news['language'].upper()}: {news['title'][:60]}...")
        
        print()
    
    print(f"üìä –ò—Ç–æ–≥–æ:")
    print(f"   –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {total_news}")
    print(f"   AI –Ω–æ–≤–æ—Å—Ç–µ–π: {ai_news}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: {(ai_news/max(1,total_news)*100):.1f}%")

if __name__ == "__main__":
    asyncio.run(test_russian_sources()) 