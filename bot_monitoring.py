# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è AI News Bot
import os
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class AlertLevel(Enum):
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"

@dataclass
class BotMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    cycles_completed: int = 0
    news_processed: int = 0
    news_published: int = 0
    errors_count: int = 0
    api_requests: int = 0
    api_costs: float = 0.0
    last_cycle_duration: float = 0.0
    uptime_start: datetime = None
    
    def __post_init__(self):
        if self.uptime_start is None:
            self.uptime_start = datetime.now()

class SimpleMonitor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, storage_path: str = "bot_metrics.json"):
        self.storage_path = storage_path
        self.metrics = BotMetrics()
        self.alerts: List[str] = []
        self.start_time = time.time()
        self._load_metrics()
    
    def _load_metrics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.storage_path):
                with open(self.storage_path, 'r') as f:
                    data = json.load(f)
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    for key, value in data.items():
                        if hasattr(self.metrics, key):
                            if key == 'uptime_start':
                                setattr(self.metrics, key, datetime.fromisoformat(value))
                            else:
                                setattr(self.metrics, key, value)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _save_metrics(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ —Ñ–∞–π–ª"""
        try:
            data = {}
            for key, value in self.metrics.__dict__.items():
                if isinstance(value, datetime):
                    data[key] = value.isoformat()
                else:
                    data[key] = value
            
            with open(self.storage_path, 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def record_cycle_start(self):
        """–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞"""
        self.cycle_start_time = time.time()
    
    def record_cycle_end(self, published_count: int = 0, error_count: int = 0):
        """–ó–∞–ø–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–∞"""
        if hasattr(self, 'cycle_start_time'):
            duration = time.time() - self.cycle_start_time
            self.metrics.last_cycle_duration = duration
        
        self.metrics.cycles_completed += 1
        self.metrics.news_published += published_count
        self.metrics.errors_count += error_count
        
        self._save_metrics()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        if error_count > 3:
            self._add_alert(AlertLevel.WARNING, f"–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ —Ü–∏–∫–ª–µ: {error_count}")
        
        if duration > 600:  # 10 –º–∏–Ω—É—Ç
            self._add_alert(AlertLevel.WARNING, f"–î–æ–ª–≥–∏–π —Ü–∏–∫–ª: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    
    def record_api_usage(self, cost: float):
        """–ó–∞–ø–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        self.metrics.api_requests += 1
        self.metrics.api_costs += cost
        self._save_metrics()
    
    def record_news_processed(self, count: int):
        """–ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        self.metrics.news_processed += count
        self._save_metrics()
    
    def _add_alert(self, level: AlertLevel, message: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        alert = f"[{timestamp}] {level.value.upper()}: {message}"
        self.alerts.append(alert)
        logger.warning(alert)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∞–ª–µ—Ä—Ç–æ–≤
        if len(self.alerts) > 100:
            self.alerts = self.alerts[-100:]
    
    def get_summary(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        uptime = datetime.now() - self.metrics.uptime_start
        
        return {
            "uptime_hours": uptime.total_seconds() / 3600,
            "cycles_completed": self.metrics.cycles_completed,
            "news_published": self.metrics.news_published,
            "news_processed": self.metrics.news_processed,
            "errors_count": self.metrics.errors_count,
            "api_requests": self.metrics.api_requests,
            "api_costs": self.metrics.api_costs,
            "last_cycle_duration": self.metrics.last_cycle_duration,
            "avg_news_per_cycle": self.metrics.news_published / max(1, self.metrics.cycles_completed),
            "error_rate": self.metrics.errors_count / max(1, self.metrics.cycles_completed),
            "recent_alerts": self.alerts[-5:] if self.alerts else []
        }
    
    def format_summary_message(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        summary = self.get_summary()
        
        message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI News Bot</b>

‚è± <b>–†–∞–±–æ—Ç–∞–µ—Ç:</b> {summary['uptime_hours']:.1f} —á–∞—Å–æ–≤
üîÑ <b>–¶–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {summary['cycles_completed']}
üì∞ <b>–ù–æ–≤–æ—Å—Ç–µ–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {summary['news_published']}
üîç <b>–ù–æ–≤–æ—Å—Ç–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {summary['news_processed']}
‚ùå <b>–û—à–∏–±–æ–∫:</b> {summary['errors_count']}

üí∞ <b>API –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {summary['api_requests']}
üíµ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> ${summary['api_costs']:.4f}

üìà <b>–°—Ä–µ–¥–Ω–µ–µ:</b>
‚Ä¢ {summary['avg_news_per_cycle']:.1f} –Ω–æ–≤–æ—Å—Ç–µ–π/—Ü–∏–∫–ª
‚Ä¢ {summary['error_rate']:.1f} –æ—à–∏–±–æ–∫/—Ü–∏–∫–ª
‚Ä¢ {summary['last_cycle_duration']:.1f}—Å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª"""

        if summary['recent_alerts']:
            message += f"\n\n‚ö†Ô∏è <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"
            for alert in summary['recent_alerts']:
                message += f"‚Ä¢ <code>{alert}</code>\n"
        
        return message

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
def add_monitoring_to_bot(bot_instance):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞"""
    bot_instance.monitor = SimpleMonitor()
    
    # –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è run_news_cycle
    original_cycle = bot_instance.run_news_cycle
    
    async def monitored_cycle():
        bot_instance.monitor.record_cycle_start()
        error_count = 0
        published_count = 0
        
        try:
            result = await original_cycle()
            published_count = getattr(result, 'published_count', 0)
        except Exception as e:
            error_count = 1
            raise
        finally:
            bot_instance.monitor.record_cycle_end(published_count, error_count)
    
    bot_instance.run_news_cycle = monitored_cycle
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async def get_bot_stats():
        return bot_instance.monitor.format_summary_message()
    
    bot_instance.get_bot_stats = get_bot_stats 