# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è 24/7

import os
import threading
import time
import psutil
from http.server import HTTPServer, SimpleHTTPRequestHandler
import json
from datetime import datetime

# ===== 1. KEEP-ALIVE –°–ï–†–í–ï–† –î–õ–Ø RENDER =====
def setup_keep_alive_server():
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ"""
    
    class HealthHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/':
                self.send_response(200)
                self.send_header('Content-type', 'text/html; charset=utf-8')
                self.end_headers()
                
                html_content = """
                <!DOCTYPE html>
                <html>
                <head>
                    <title>AI News Bot</title>
                    <meta charset="utf-8">
                    <style>
                        body { font-family: Arial; text-align: center; padding: 50px; background: #f0f0f0; }
                        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                        .status { color: #28a745; font-size: 24px; margin: 20px 0; }
                        .stats { text-align: left; margin: 20px 0; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>ü§ñ AI News Bot v2.0</h1>
                        <div class="status">‚úÖ –°—Ç–∞—Ç—É—Å: –†–ê–ë–û–¢–ê–ï–¢</div>
                        <div class="stats">
                            <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:</h3>
                            <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> {uptime}</p>
                            <p><strong>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</strong> {memory} MB</p>
                            <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</strong> {timestamp}</p>
                            <p><strong>–í–µ—Ä—Å–∏—è:</strong> 2.0</p>
                        </div>
                        <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è AI –Ω–æ–≤–æ—Å—Ç–µ–π</p>
                        <p><small>Powered by Claude 3.5 Sonnet & OpenRouter</small></p>
                    </div>
                </body>
                </html>
                """.format(
                    uptime=self.get_uptime(),
                    memory=self.get_memory_usage(),
                    timestamp=datetime.now().strftime('%H:%M:%S %d.%m.%Y')
                ).encode('utf-8')
                
                self.wfile.write(html_content)
                
            elif self.path == '/health':
                # Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                health_data = {
                    'status': 'healthy',
                    'timestamp': datetime.now().isoformat(),
                    'uptime_seconds': time.time() - self.server.start_time,
                    'memory_mb': self.get_memory_usage(),
                    'version': '2.0'
                }
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(health_data).encode())
                
            elif self.path == '/metrics':
                # Metrics endpoint –¥–ª—è Prometheus/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                metrics = f"""
# HELP bot_uptime_seconds Bot uptime in seconds
# TYPE bot_uptime_seconds counter
bot_uptime_seconds {time.time() - self.server.start_time}

# HELP bot_memory_mb Memory usage in MB
# TYPE bot_memory_mb gauge
bot_memory_mb {self.get_memory_usage()}

# HELP bot_status Bot status (1 = healthy, 0 = unhealthy)
# TYPE bot_status gauge
bot_status 1
"""
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()
                self.wfile.write(metrics.encode())
                
            else:
                self.send_response(404)
                self.end_headers()
        
        def get_uptime(self):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
            uptime_seconds = time.time() - self.server.start_time
            hours = int(uptime_seconds // 3600)
            minutes = int((uptime_seconds % 3600) // 60)
            return f"{hours}—á {minutes}–º"
        
        def get_memory_usage(self):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
            try:
                process = psutil.Process()
                return round(process.memory_info().rss / 1024 / 1024, 1)
            except:
                return 0
        
        def log_message(self, format, *args):
            """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
            pass
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get('PORT', 8080))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    server.start_time = time.time()
    
    def run_server():
        print(f"üåê Keep-alive —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        server.serve_forever()
    
    thread = threading.Thread(target=run_server)
    thread.daemon = True
    thread.start()
    
    return server

# ===== 2. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ò–ù–ì (–¥–ª—è Render –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞) =====
def setup_self_ping(bot_url: str = None):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è"""
    
    if not bot_url:
        # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL
        service_name = os.environ.get('RENDER_SERVICE_NAME', 'ai-news-bot')
        bot_url = f"https://{service_name}.onrender.com"
    
    async def ping_self():
        """–ü–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è –∫–∞–∂–¥—ã–µ 14 –º–∏–Ω—É—Ç"""
        import aiohttp
        
        while True:
            try:
                await asyncio.sleep(14 * 60)  # 14 –º–∏–Ω—É—Ç
                
                async with aiohttp.ClientSession() as session:
                    async with session.get(f"{bot_url}/health", timeout=10) as response:
                        if response.status == 200:
                            print(f"üèì Self-ping —É—Å–ø–µ—à–µ–Ω: {datetime.now().strftime('%H:%M')}")
                        else:
                            print(f"‚ö†Ô∏è Self-ping –Ω–µ—É–¥–∞—á–µ–Ω: {response.status}")
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ self-ping: {e}")
                await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    import asyncio
    asyncio.create_task(ping_self())

# ===== 3. –ú–û–ù–ò–¢–û–†–ò–ù–ì –†–ï–°–£–†–°–û–í =====
class ResourceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    def __init__(self, alert_callback=None):
        self.alert_callback = alert_callback
        self.start_time = time.time()
        self.memory_threshold = 400  # MB
        self.cpu_threshold = 80      # %
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        while True:
            try:
                memory_mb = psutil.Process().memory_info().rss / 1024 / 1024
                cpu_percent = psutil.Process().cpu_percent()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                if memory_mb > self.memory_threshold:
                    await self.send_alert(f"üö® –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} MB")
                
                if cpu_percent > self.cpu_threshold:
                    await self.send_alert(f"üö® –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent:.1f}%")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
                uptime_hours = (time.time() - self.start_time) / 3600
                if int(uptime_hours) > 0 and int(uptime_hours) % 6 == 0:  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                    print(f"üìä –°—Ç–∞—Ç—É—Å: RAM {memory_mb:.1f}MB, CPU {cpu_percent:.1f}%, Uptime {uptime_hours:.1f}h")
                
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)
    
    async def send_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        if self.alert_callback:
            await self.alert_callback(message)
        print(f"‚ö†Ô∏è ALERT: {message}")

# ===== 4. GRACEFUL SHUTDOWN =====
import signal
import asyncio

class GracefulShutdown:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.shutdown_event = asyncio.Event()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.shutdown_event.set()
    
    async def wait_for_shutdown(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        await self.shutdown_event.wait()
        await self.cleanup()
    
    async def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        try:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if hasattr(self.bot, 'database_connection'):
                self.bot.database_connection.close()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
            if hasattr(self.bot, '_send_admin_alert'):
                await self.bot._send_admin_alert("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# ===== 5. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –°–ï–†–í–ï–†–ê =====
def setup_server_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã"""
    import logging
    import sys
    from logging.handlers import RotatingFileHandler
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä (–¥–ª—è Docker/–æ–±–ª–∞—á–Ω—ã—Ö –ª–æ–≥–æ–≤)
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ)
    try:
        file_handler = RotatingFileHandler(
            'bot.log', 
            maxBytes=10*1024*1024,  # 10MB
            backupCount=3
        )
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –æ–±–ª–∞–∫–µ

# ===== 6. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï =====
class AutoRecovery:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.consecutive_errors = 0
        self.max_errors = 5
        self.recovery_delay = 300  # 5 –º–∏–Ω—É—Ç
    
    async def run_with_recovery(self, coro):
        """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
        while True:
            try:
                await coro()
                self.consecutive_errors = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                
            except Exception as e:
                self.consecutive_errors += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ #{self.consecutive_errors}: {e}")
                
                if self.consecutive_errors >= self.max_errors:
                    print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫, –æ–∂–∏–¥–∞–Ω–∏–µ {self.recovery_delay}—Å")
                    await asyncio.sleep(self.recovery_delay)
                    self.consecutive_errors = 0
                else:
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    delay = min(60 * (2 ** self.consecutive_errors), 300)
                    await asyncio.sleep(delay)

# ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –û–°–ù–û–í–ù–û–ô –ë–û–¢ =====
"""
–î–æ–±–∞–≤–∏—Ç—å –≤ main() —Ñ—É–Ω–∫—Ü–∏—é telegram-ai-news-bot.py:

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    setup_server_logging()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    bot = AINewsBot()
    
    # Keep-alive —Å–µ—Ä–≤–µ—Ä
    keep_alive_server = setup_keep_alive_server()
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    monitor = ResourceMonitor(alert_callback=bot._send_admin_alert)
    asyncio.create_task(monitor.start_monitoring())
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –¥–ª—è Render)
    if os.environ.get('RENDER_SERVICE_NAME'):
        setup_self_ping()
    
    # Graceful shutdown
    shutdown_handler = GracefulShutdown(bot)
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    recovery = AutoRecovery(bot)
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        await recovery.run_with_recovery(bot.start_bot)
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω Ctrl+C")
    finally:
        await shutdown_handler.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
""" 