#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö AI News Bot
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
"""

import os
import sqlite3
from datetime import datetime, timedelta
import json

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î (—Ç–∞–∫ –∂–µ –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ)
    if os.path.exists('/opt/render') or os.getenv('RENDER'):
        db_path = '/opt/render/project/ai_news.db'
    elif os.path.exists('/app'):  # Heroku
        db_path = '/app/ai_news.db'
    else:
        db_path = os.getenv('DATABASE_PATH', 'ai_news.db')
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    db_size = os.path.getsize(db_path)
    print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {db_size} –±–∞–π—Ç")
    
    try:
        conn = sqlite3.connect(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.execute("PRAGMA table_info(published_news)")
        columns = cursor.fetchall()
        print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:")
        for col in columns:
            print(f"  ‚Ä¢ {col[1]} ({col[2]})")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = conn.execute("SELECT COUNT(*) FROM published_news").fetchone()[0]
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status
        status_column_exists = any(col[1] == 'status' for col in columns)
        
        if status_column_exists:
            published = conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'published'").fetchone()[0]
            reserved = conn.execute("SELECT COUNT(*) FROM published_news WHERE status = 'reserved'").fetchone()[0]
            print(f"  ‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {published}")
            print(f"  ‚Ä¢ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {reserved}")
        else:
            print("  ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ 'status' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –ë–î)")
        
        # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
        day_ago = datetime.now() - timedelta(hours=24)
        week_ago = datetime.now() - timedelta(days=7)
        
        recent_day = conn.execute("SELECT COUNT(*) FROM published_news WHERE created_at > ?", (day_ago,)).fetchone()[0]
        recent_week = conn.execute("SELECT COUNT(*) FROM published_news WHERE created_at > ?", (week_ago,)).fetchone()[0]
        
        print(f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {recent_day}")
        print(f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {recent_week}")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
        print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        if status_column_exists:
            cursor = conn.execute(
                "SELECT title, status, created_at FROM published_news ORDER BY created_at DESC LIMIT 5"
            )
        else:
            cursor = conn.execute(
                "SELECT title, created_at FROM published_news ORDER BY created_at DESC LIMIT 5"
            )
        
        records = cursor.fetchall()
        for i, record in enumerate(records, 1):
            if status_column_exists:
                title, status, created_at = record
                print(f"  {i}. [{status}] {title[:50]}... ({created_at})")
            else:
                title, created_at = record
                print(f"  {i}. {title[:50]}... ({created_at})")
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        cursor = conn.execute("""
            SELECT link, COUNT(*) as count 
            FROM published_news 
            GROUP BY link 
            HAVING count > 1
        """)
        duplicates = cursor.fetchall()
        
        if duplicates:
            print(f"  ‚ùå –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º:")
            for link, count in duplicates[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"    ‚Ä¢ {link[:50]}... (–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {count})")
        else:
            print(f"  ‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")

if __name__ == "__main__":
    check_database() 