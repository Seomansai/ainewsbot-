# –ë—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è

# ===== 1. –î–û–ë–ê–í–ò–¢–¨ –í telegram-ai-news-bot.py =====

# –í –±–ª–æ–∫ RSS_SOURCES –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
ADDITIONAL_RSS_SOURCES = {
    # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –±–ª–æ–≥–∏
    "OpenAI Blog": "https://openai.com/blog/rss.xml",
    "Google AI Blog": "https://ai.googleblog.com/feeds/posts/default", 
    "Meta AI": "https://ai.facebook.com/blog/feed/",
    "NVIDIA AI": "https://blogs.nvidia.com/blog/category/artificial-intelligence/feed/",
    "Microsoft AI": "https://blogs.microsoft.com/ai/feed/",
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ
    "VC.ru AI": "https://vc.ru/tag/ai/rss",
    "–•–∞–±—Ä Neural Networks": "https://habr.com/ru/rss/hub/neural_networks/",
    
    # –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ
    "Towards Data Science": "https://towardsdatascience.com/feed",
    "Machine Learning Mastery": "https://machinelearningmastery.com/feed/"
}

# ===== 2. –£–õ–£–ß–®–ò–¢–¨ –§–£–ù–ö–¶–ò–Æ is_ai_related =====
def improved_is_ai_related(self, title: str, description: str) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ AI"""
    text = f"{title} {description}".lower()
    
    # –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤–µ—Å 3)
    high_priority = [
        'artificial intelligence', 'machine learning', 'deep learning', 'neural network',
        'chatgpt', 'gpt-4', 'claude', 'llm', 'large language model', 'transformer',
        '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å'
    ]
    
    # –°—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ (–≤–µ—Å 2)  
    medium_priority = [
        'computer vision', 'natural language processing', 'nlp', 'automation',
        'algorithm', 'data science', 'predictive', 'classification',
        '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º'
    ]
    
    # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞ (—à—Ç—Ä–∞—Ñ -5)
    exclude_words = [
        'cryptocurrency', 'bitcoin', 'blockchain', 'nft', 'web3', 'gaming',
        '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '–±–∏—Ç–∫–æ–∏–Ω', '–±–ª–æ–∫—á–µ–π–Ω', '–∏–≥—Ä—ã'
    ]
    
    score = 0
    
    for word in high_priority:
        if word in text:
            score += 3
    
    for word in medium_priority:
        if word in text:
            score += 2
    
    for word in exclude_words:
        if word in text:
            score -= 5
    
    return score >= 3  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞

# ===== 3. –î–û–ë–ê–í–ò–¢–¨ –ú–ï–¢–†–ò–ö–ò –í –ê–î–ú–ò–ù–°–ö–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø =====
def enhanced_daily_stats_message(self) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    stats = self.get_statistics()
    cost_stats = self.cost_tracker.get_monthly_spending()
    
    # –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    processed = stats.get('news_processed_today', 0)
    published = stats.get('news_published_today', 0)
    efficiency = (published / processed * 100) if processed > 0 else 0
    
    # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—å
    avg_cost = cost_stats / published if published > 0 else 0
    
    message = f"""üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI News Bot</b>
üóì {datetime.now().strftime('%d.%m.%Y')}

üìà <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {processed}
‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published}
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%
‚Ä¢ –î—É–±–ª–µ–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {processed - published}

üí∞ <b>–†–∞—Å—Ö–æ–¥—ã:</b>
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.get('cost_today', 0):.3f}
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: ${cost_stats:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å/–Ω–æ–≤–æ—Å—Ç—å: ${avg_cost:.3f}
‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: ${self.cost_tracker.get_remaining_budget():.2f}

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ü–∏–∫–ª–∞: {stats.get('last_cycle_duration', 'N/A')}s
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([s for s in stats.get('source_stats', {}).values() if s > 0])}
‚Ä¢ –û—à–∏–±–æ–∫ –∑–∞ –¥–µ–Ω—å: {stats.get('errors_today', 0)}

üåç <b>–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_stats = stats.get('source_stats', {})
    top_sources = sorted(source_stats.items(), key=lambda x: x[1], reverse=True)[:3]
    
    for i, (source, count) in enumerate(top_sources, 1):
        message += f"\n{i}. {source}: {count} –Ω–æ–≤–æ—Å—Ç–µ–π"
    
    return message

# ===== 4. –î–û–ë–ê–í–ò–¢–¨ WEBHOOK –î–õ–Ø HEALTHCHECK =====
def add_health_endpoint(self):
    """–î–æ–±–∞–≤–∏—Ç—å endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import json
    import threading
    
    class HealthHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/health':
                health_data = {
                    'status': 'healthy',
                    'timestamp': datetime.now().isoformat(),
                    'last_successful_cycle': self.server.bot.get_statistics().get('last_successful_cycle'),
                    'memory_usage_mb': psutil.Process().memory_info().rss / 1024 / 1024,
                    'version': '2.0'
                }
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(health_data).encode())
            else:
                self.send_response(404)
                self.end_headers()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
    server.bot = self  # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()

# ===== 5. –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø =====
# –î–æ–±–∞–≤–∏—Ç—å –≤ .env –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
"""
# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
MAX_CONCURRENT_RSS=10
CACHE_TTL_HOURS=2
BATCH_SIZE=5

# –ö–∞—á–µ—Å—Ç–≤–æ
MIN_RELEVANCE_SCORE=3
MAX_NEWS_PER_SOURCE=5
ENABLE_IMAGE_EXTRACTION=true

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥  
HEALTH_CHECK_PORT=8080
ALERT_RATE_LIMIT_MINUTES=30
MEMORY_ALERT_THRESHOLD_MB=500

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
ENABLE_NEWSAPI=false
NEWSAPI_KEY=your_key_here
ENABLE_SOCIAL_MEDIA=false
"""

# ===== 6. –ü–†–û–°–¢–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê =====
async def handle_admin_commands(self, message_text: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not message_text.startswith('/'):
        return None
    
    command = message_text.lower().strip()
    
    if command == '/stats':
        return self.enhanced_daily_stats_message()
    
    elif command == '/health':
        issues = await self.check_system_health()
        if issues:
            return f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n" + '\n'.join(issues)
        else:
            return "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    
    elif command == '/sources':
        stats = self.get_statistics().get('source_stats', {})
        active = len([s for s in stats.values() if s > 0])
        total = len(stats)
        return f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {active}/{total} –∞–∫—Ç–∏–≤–Ω—ã—Ö"
    
    elif command == '/cost':
        monthly = self.cost_tracker.get_monthly_spending()
        remaining = self.cost_tracker.get_remaining_budget()
        return f"üí∞ –†–∞—Å—Ö–æ–¥—ã: ${monthly:.2f} | –û—Å—Ç–∞—Ç–æ–∫: ${remaining:.2f}"
    
    elif command == '/help':
        return """ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
        
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã  
/sources - –°—Ç–∞—Ç—É—Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
/cost - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"""
    
    return None 